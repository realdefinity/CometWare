loadstring(game:HttpGet('https://raw.githubusercontent.com/realdefinity/CometWare/refs/heads/main/newui'))()

local MainTab = _G.baseWindow:AddTab("Main")
local MainSection = MainTab:AddSection("main")
local MovementTab = _G.baseWindow:AddTab("Movement")
local MovementSection = MovementTab:AddSection("movement")

-- Variables
local toggles = {
    customSpeedEnabled = false
}
local customSpeed = 16 -- Default speed

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

toggles = toggles or {}
toggles.customSpeedEnabled = false
customSpeed = 16
local speedConnection

local function applyCustomSpeed()
    if speedConnection then
        speedConnection:Disconnect()
    end
    speedConnection = RunService.Stepped:Connect(function(_, deltaTime)
        if toggles.customSpeedEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            local rootPart = LocalPlayer.Character.HumanoidRootPart
            if humanoid and humanoid.MoveDirection.Magnitude > 0 then
                local moveDirection = humanoid.MoveDirection * (customSpeed * deltaTime)
                rootPart.CFrame = rootPart.CFrame + Vector3.new(moveDirection.X, 0, moveDirection.Z)
            end
        end
    end)
end

MovementSection:AddToggle({ 
    Label = "Speed", 
    Default = false,
    Size = UDim2.new(0, 300, 0, 40)
}, function(state)
    toggles.customSpeedEnabled = state
    if state then
        applyCustomSpeed()
    else
        if speedConnection then
            speedConnection:Disconnect()
        end
    end
end)

MovementSection:AddSlider({ 
    Label = "Set Speed",
    Min = 16,
    Max = 50,
    Default = 16,
    Size = UDim2.new(0, 300, 0, 100)
}, function(value)
    customSpeed = value
end)

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

toggles = toggles or {}
toggles.customJumpEnabled = false
jumpPower = 50

local function applyCustomJump()
    UserInputService.JumpRequest:Connect(function()
        if toggles.customJumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = LocalPlayer.Character.HumanoidRootPart
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if not humanoid or humanoid.FloorMaterial == Enum.Material.Air then return end
            for i = 1, jumpPower, 5 do
                task.wait(0.01)
                rootPart.CFrame = rootPart.CFrame + Vector3.new(0, 0.5, 0)
            end
            task.wait(0.1)
            rootPart.CFrame = rootPart.CFrame + Vector3.new(0, -0.5, 0)
        end
    end)
end

MovementSection:AddToggle({
    Label = "Jump Power",
    Default = false,
    Size = UDim2.new(0, 300, 0, 40)
}, function(Value)
    toggles.customJumpEnabled = Value
    if Value then
        applyCustomJump()
    end
end)

MovementSection:AddSlider({
    Label = "Set Jump Power",
    Range = {10, 100},
    Increment = 5,
    Default = 50,
    Size = UDim2.new(0, 300, 0, 100)
}, function(Value)
    jumpPower = Value
end)

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- State variables
local flying = false
local flySpeed = 5  -- Default fly speed
local flyDirection = Vector3.new(0, 0, 0)
local hrp = nil  -- HumanoidRootPart
local flyConnection = nil

-- Key states for smooth flight movement
local keys = {
    W = false,
    S = false,
    A = false,
    D = false,
    Space = false,
    Shift = false
}

-- Start Fly function (with smooth, interpolated flight)
local function startFly()
    if flying or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    flying = true
    hrp = LocalPlayer.Character.HumanoidRootPart
    hrp.Anchored = true
    flyConnection = RunService.RenderStepped:Connect(function(dt)
        if flying and hrp then
            flyDirection = Vector3.new(
                ((keys.D and 1) or 0) + ((keys.A and -1) or 0),
                ((keys.Space and 1) or 0) + ((keys.Shift and -1) or 0),
                ((keys.S and 1) or 0) + ((keys.W and -1) or 0)
            )
            hrp.CFrame = hrp.CFrame * CFrame.new(flyDirection * flySpeed * 0.1)
        end
    end)
end

-- Stop Fly function
local function stopFly()
    flying = false
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
    if hrp then
        hrp.Anchored = false
    end
end

-- Update key states for flight
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.W then keys.W = true end
    if input.KeyCode == Enum.KeyCode.S then keys.S = true end
    if input.KeyCode == Enum.KeyCode.A then keys.A = true end
    if input.KeyCode == Enum.KeyCode.D then keys.D = true end
    if input.KeyCode == Enum.KeyCode.Space then keys.Space = true end
    if input.KeyCode == Enum.KeyCode.LeftShift then keys.Shift = true end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.W then keys.W = false end
    if input.KeyCode == Enum.KeyCode.S then keys.S = false end
    if input.KeyCode == Enum.KeyCode.A then keys.A = false end
    if input.KeyCode == Enum.KeyCode.D then keys.D = false end
    if input.KeyCode == Enum.KeyCode.Space then keys.Space = false end
    if input.KeyCode == Enum.KeyCode.LeftShift then keys.Shift = false end
end)

-- UI Integration using your custom UI functions.
-- (Ensure MovementSection is a valid reference to your movement UI section.)
MovementSection:AddToggle({
    Label = "Enable Fly",
    Default = false,
    Size = UDim2.new(0, 300, 0, 40)
}, function(Value)
    if Value then
        startFly()
    else
        stopFly()
    end
end)

MovementSection:AddSlider({
    Label = "Fly Speed",
    Range = {1, 20},
    Increment = 1,
    Default = flySpeed,
    Size = UDim2.new(0, 300, 0, 100)
}, function(Value)
    flySpeed = Value
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Toggle for Skeleton ESP
local skeletonESPEnabled = false
local espConnection

-- Table to hold each enemyâ€™s ESP lines
local skeletonESP = {}

-- Get the connections (joints) for the character.
-- For R6, we assume parts: "Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"
-- For R15, we use a more detailed set.
local function getSkeletonConnections(character)
    local connections = {}
    if character:FindFirstChild("UpperTorso") then
        -- R15 rig connections
        table.insert(connections, {"Head", "UpperTorso"})
        table.insert(connections, {"UpperTorso", "LeftUpperArm"})
        table.insert(connections, {"LeftUpperArm", "LeftLowerArm"})
        table.insert(connections, {"LeftLowerArm", "LeftHand"})
        table.insert(connections, {"UpperTorso", "RightUpperArm"})
        table.insert(connections, {"RightUpperArm", "RightLowerArm"})
        table.insert(connections, {"RightLowerArm", "RightHand"})
        table.insert(connections, {"UpperTorso", "LowerTorso"})
        table.insert(connections, {"LowerTorso", "LeftUpperLeg"})
        table.insert(connections, {"LeftUpperLeg", "LeftLowerLeg"})
        table.insert(connections, {"LeftLowerLeg", "LeftFoot"})
        table.insert(connections, {"LowerTorso", "RightUpperLeg"})
        table.insert(connections, {"RightUpperLeg", "RightLowerLeg"})
        table.insert(connections, {"RightLowerLeg", "RightFoot"})
    else
        -- Assume R6 rig
        table.insert(connections, {"Head", "Torso"})
        table.insert(connections, {"Torso", "Left Arm"})
        table.insert(connections, {"Torso", "Right Arm"})
        table.insert(connections, {"Torso", "Left Leg"})
        table.insert(connections, {"Torso", "Right Leg"})
    end
    return connections
end

-- Create drawing objects for a given enemy player.
local function createSkeletonDrawing(player)
    if skeletonESP[player] then return end
    skeletonESP[player] = {}  -- Table of connection data for this player
    local character = player.Character
    if not character then return end
    local connections = getSkeletonConnections(character)
    for i, conn in ipairs(connections) do
        local line = Drawing.new("Line")
        line.Visible = false
        line.Color = Color3.new(0, 1, 0)  -- Green lines
        line.Thickness = 2
        line.Transparency = 1
        table.insert(skeletonESP[player], {PartA = conn[1], PartB = conn[2], Line = line})
    end
end

-- Remove the ESP drawings for a player.
local function removeSkeletonDrawing(player)
    if skeletonESP[player] then
        for _, conn in ipairs(skeletonESP[player]) do
            if conn.Line then
                conn.Line:Remove()
            end
        end
        skeletonESP[player] = nil
    end
end

-- Update all enemy ESP lines each frame.
local function updateSkeletonESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            -- Create ESP if not already created.
            if not skeletonESP[player] then
                createSkeletonDrawing(player)
            end
            local character = player.Character
            local connections = skeletonESP[player]
            for _, data in ipairs(connections) do
                local partA = character:FindFirstChild(data.PartA)
                local partB = character:FindFirstChild(data.PartB)
                if partA and partB then
                    local posA, onScreenA = Camera:WorldToViewportPoint(partA.Position)
                    local posB, onScreenB = Camera:WorldToViewportPoint(partB.Position)
                    if onScreenA and onScreenB then
                        data.Line.From = Vector2.new(posA.X, posA.Y)
                        data.Line.To = Vector2.new(posB.X, posB.Y)
                        data.Line.Visible = true
                    else
                        data.Line.Visible = false
                    end
                else
                    data.Line.Visible = false
                end
            end
        end
    end
end

-- Enable the skeleton ESP
local function enableSkeletonESP()
    skeletonESPEnabled = true
    espConnection = RunService.RenderStepped:Connect(updateSkeletonESP)
end

-- Disable the skeleton ESP and remove all drawings
local function disableSkeletonESP()
    skeletonESPEnabled = false
    if espConnection then
        espConnection:Disconnect()
        espConnection = nil
    end
    for player, _ in pairs(skeletonESP) do
        removeSkeletonDrawing(player)
    end
end

-- Clean up when players leave
Players.PlayerRemoving:Connect(function(player)
    removeSkeletonDrawing(player)
end)

-- Also update ESP for character respawns.
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if skeletonESPEnabled then
            createSkeletonDrawing(player)
        end
    end)
end)

-- UI Toggle Integration (Assuming MainSection is your UI container)
MainSection:AddToggle({
    Label = "Skeleton ESP",
    Default = false,
    Size = UDim2.new(0, 300, 0, 40)
}, function(state)
    if state then
        enableSkeletonESP()
    else
        disableSkeletonESP()
    end
end)

local Players = game:GetService("Players")
local VirtualUser = game:GetService("VirtualUser")
local StarterGui = game:GetService("StarterGui")

local LocalPlayer = Players.LocalPlayer

-- Send a notification to confirm anti-AFK is enabled.
StarterGui:SetCore("SendNotification", {
    Title = "Anti-AFK",
    Text = "anti-afk is implemented",
    Duration = 5  -- Notification displays for 5 seconds.
})

-- Listen for idling and simulate activity.
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)
