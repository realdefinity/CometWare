-- Load Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create the Rayfield UI Window
local Window = Rayfield:CreateWindow({
    Name = "COMET: shrimp game edition",
    LoadingTitle = "Loading Shrimp Game...",
    LoadingSubtitle = "By Definity",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "Comet shrimp game", -- Save configs in a folder
        FileName = "ShrimpDominator" -- Config file name
    }
})

-- üåü Tabs for Features
local MainTab = Window:CreateTab("Main Features", 4483362458) -- Main gameplay features
local VisualsTab = Window:CreateTab("Visuals", 4483362458) -- ESP & visuals
local MovementTab = Window:CreateTab("Movement", 4483362458) -- Speed, jump boosts
local MiscTab = Window:CreateTab("Miscellaneous", 4483362458) -- Other fun stuff

-- üåü Global Variables (Toggle States)
local toggles = {
    espEnabled = false,
    autoWin = false,
    infiniteJump = false,
    speedBoost = false,
    jumpBoost = false
}

-- üåü Function to Notify Players
local function notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 5,
        Actions = {
            Dismiss = {
                Name = "OK",
                Callback = function() end
            }
        }
    })
end

-- FPS Booster and Setter with Rayfield UI Integration

-- üåü FPS Booster Variables
local FPSBooster = {}
local toggles = {
    fpsBoostEnabled = false
}
local defaultWalkSpeed = 16 -- Default Roblox walk speed (used in resets)

-- üåü Function to Notify Players
local function notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 5,
        Actions = {
            Dismiss = {
                Name = "OK",
                Callback = function() end
            }
        }
    })
end

-- üåü FPS Booster Logic
function FPSBooster:Boost()
    -- Optimize Workspace
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("BasePart") then
            obj.Material = Enum.Material.SmoothPlastic -- Simplify materials
            obj.Reflectance = 0 -- Remove reflections
        elseif obj:IsA("ParticleEmitter") or obj:IsA("Trail") then
            obj.Enabled = false -- Disable particles and trails
        elseif obj:IsA("Beam") then
            obj.Enabled = false -- Disable beams
        elseif obj:IsA("PointLight") or obj:IsA("SpotLight") or obj:IsA("SurfaceLight") then
            obj.Enabled = false -- Disable unnecessary lights
        end
    end

    -- Optimize Lighting
    local Lighting = game:GetService("Lighting")
    Lighting.GlobalShadows = false -- Disable global shadows
    Lighting.FogEnd = 9e9 -- Remove fog
    Lighting.Brightness = 1 -- Simplify brightness
    Lighting.EnvironmentSpecularScale = 0 -- Disable specular effects
    Lighting.EnvironmentDiffuseScale = 0 -- Disable diffuse lighting

    -- Disable Terrain Decoration
    if workspace:FindFirstChildOfClass("Terrain") then
        workspace.Terrain.Decoration = false
    end

    -- Notify Player
    notify("FPS Booster", "FPS Booster applied! Performance optimized.")
end

-- üåü FPS Setter Logic
function FPSBooster:SetFPSCap(fps)
    if setfpscap then
        setfpscap(fps)
        notify("FPS Cap", "FPS cap set to " .. tostring(fps) .. " FPS.")
    else
        notify("Error", "Your executor does not support `setfpscap`.")
    end
end

-- üåü UI Integration
VisualsTab:CreateButton({
    Name = "Apply FPS Boost",
    Callback = function()
        FPSBooster:Boost()
    end
})

-- FPS Cap Slider
VisualsTab:CreateSlider({
    Name = "Set FPS Cap",
    Range = {30, 300}, -- Min/Max FPS values
    Increment = 10, -- Adjust in steps of 10
    CurrentValue = 60, -- Default FPS cap
    Flag = "FPSCapSlider",
    Callback = function(Value)
        FPSBooster:SetFPSCap(Value)
    end
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Variables
local toggles = {
    customSpeedEnabled = false
}
local customSpeed = 16 -- Default speed

-- Helper: Notify Function
local function notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 5,
        Actions = {
            Dismiss = {
                Name = "OK",
                Callback = function() end
            }
        }
    })
end

-- Anti-Cheat Friendly Custom Speed (CFrame Stepping)
local function applyCustomSpeed()
    if toggles.customSpeedEnabled then
        notify("Custom Speed", "Custom Speed enabled! Moving safely...")
    else
        notify("Custom Speed", "Custom Speed disabled.")
        return
    end

    -- Start applying speed
    RunService.Stepped:Connect(function(_, deltaTime)
        if toggles.customSpeedEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            local rootPart = LocalPlayer.Character.HumanoidRootPart

            -- Prevent anti-cheat from detecting abnormal movement
            if humanoid and humanoid.MoveDirection.Magnitude > 0 then
                -- Apply small, incremental CFrame changes based on movement direction
                local moveDirection = humanoid.MoveDirection * (customSpeed * deltaTime)
                rootPart.CFrame = rootPart.CFrame + Vector3.new(moveDirection.X, 0, moveDirection.Z)
            end
        end
    end)
end

local MovementSection = MovementTab:CreateSection("Bypassed Movement")


-- Toggle Custom Speed
MovementTab:CreateToggle({
    Name = "Speed",
    CurrentValue = false,
    Flag = "CustomSpeedToggle",
    Callback = function(Value)
        toggles.customSpeedEnabled = Value
        if Value then
            applyCustomSpeed()
        end
    end
})

-- Speed Slider
MovementTab:CreateSlider({
    Name = "Set Speed",
    Range = {16, 50}, -- Safe speed range
    Increment = 2,
    CurrentValue = 16,
    Flag = "CustomSpeedSlider",
    Callback = function(Value)
        customSpeed = Value
        notify("Custom Speed", "Custom Speed set to " .. Value .. ".")
    end
})

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Variables
local toggles = {
    customJumpEnabled = false
}
local jumpPower = 50 -- Default custom jump height

-- Helper: Notify Function
local function notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 5,
        Actions = {
            Dismiss = {
                Name = "OK",
                Callback = function() end
            }
        }
    })
end

-- Advanced Anti-Cheat Friendly Jump Logic
local function applyCustomJump()
    UserInputService.JumpRequest:Connect(function()
        if toggles.customJumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = LocalPlayer.Character.HumanoidRootPart
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if not humanoid or humanoid.FloorMaterial == Enum.Material.Air then return end -- Ensure we're on the ground

            -- Simulate smooth jump with incremental CFrame adjustments
            for i = 1, jumpPower, 5 do
                task.wait(0.01) -- Small delay for smoothness
                rootPart.CFrame = rootPart.CFrame + Vector3.new(0, 0.5, 0) -- Incrementally move up
            end

            -- Simulate landing
            task.wait(0.1)
            rootPart.CFrame = rootPart.CFrame + Vector3.new(0, -0.5, 0) -- Minor correction to mimic landing
        end
    end)
end

-- Toggle Custom Jump Power
MovementTab:CreateToggle({
    Name = "Jump Power",
    CurrentValue = false,
    Flag = "CustomJumpToggle",
    Callback = function(Value)
        toggles.customJumpEnabled = Value
        if Value then
            applyCustomJump()
            notify("Custom Jump Power", "Jump Power enabled!")
        else
            notify("Custom Jump Power", "Jump Power disabled.")
        end
    end
})

-- Jump Power Slider
MovementTab:CreateSlider({
    Name = "Set Jump Power",
    Range = {10, 100}, -- Safe range for jump height
    Increment = 5,
    CurrentValue = 50,
    Flag = "CustomJumpSlider",
    Callback = function(Value)
        jumpPower = Value
        notify("Jump Power", "Jump Power set to " .. Value .. ".")
    end
})

-- üåü OP Auto Cookie Cutter (100% Fixed & Working) üåü
local CookieCutter = {}
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- üîß Variables
local autoCutEnabled = false
local cuttingSpeed = 0.02 -- Speed of cutting movement
local detectedCookie = nil -- Stores detected cookie shape
local cutRemote = nil -- Stores the game's cutting event

-- üéÆ **Detects If Player Is Inside The Cookie Cutting Mini-Game**
local function isInCookieGame()
    return Workspace:FindFirstChild("CookieGame") -- Adjust if needed
end

-- üî• **Find the Cookie Cutting RemoteEvent**
local function findCuttingEvent()
    for _, v in pairs(ReplicatedStorage:GetDescendants()) do
        if v:IsA("RemoteEvent") and v.Name:lower():find("cut") then
            return v
        end
    end
    return nil
end

-- üîç **Detect & Extract Cookie Shape**
local function detectCookieShape()
    if not isInCookieGame() then return end
    detectedCookie = nil

    for _, part in pairs(Workspace:GetDescendants()) do
        if part:IsA("Part") and part.Name:match("Shape") then -- Adjust name if needed
            detectedCookie = part
            break
        end
    end
end

-- üöÄ **Auto Cut Cookie Shape (Uses Game's Cutting System)**
local function autoCutShape()
    if not autoCutEnabled or not detectedCookie then return end
    if not cutRemote then cutRemote = findCuttingEvent() end
    if not cutRemote then return end

    local shapeSize = detectedCookie.Size
    local center = detectedCookie.Position

    -- üõ†Ô∏è Cut Around the Shape (Loop around edges)
    for i = 0, 360, 10 do -- Cut every 10 degrees
        local angle = math.rad(i)
        local cutPosition = Vector3.new(
            center.X + (math.cos(angle) * shapeSize.X / 2),
            center.Y,
            center.Z + (math.sin(angle) * shapeSize.Z / 2)
        )

        cutRemote:FireServer(cutPosition) -- Simulate real cutting
        task.wait(cuttingSpeed)
    end
end

-- üîÑ **Auto Detect & Cut When The Mini-Game Starts**
local function autoCutLoop()
    while autoCutEnabled do
        if isInCookieGame() and not detectedCookie then
            detectCookieShape()
        end

        if autoCutEnabled and detectedCookie then
            autoCutShape()
            break
        end

        task.wait(1) -- Check every second for new game start
    end
end

-- üåü **UI Integration in MainTab**
local CookieCutterSection = MainTab:CreateSection("Auto Cookie Cutter")

MainTab:CreateToggle({
    Name = "Enable Auto Cookie Cutter",
    CurrentValue = false,
    Flag = "AutoCutToggle",
    SectionParent = CookieCutterSection,
    Callback = function(Value)
        autoCutEnabled = Value
        if Value then
            Rayfield:Notify({
                Title = "Auto Cookie Cutter",
                Content = "Waiting for shape detection...",
                Duration = 3
            })
            task.spawn(autoCutLoop)
        else
            Rayfield:Notify({
                Title = "Auto Cookie Cutter",
                Content = "Auto Cutter Disabled.",
                Duration = 2
            })
        end
    end
})

MainTab:CreateSlider({
    Name = "Cutting Speed",
    Range = {0.01, 0.1}, -- Adjustable cutting speed
    Increment = 0.01,
    CurrentValue = cuttingSpeed,
    Flag = "CutSpeedSlider",
    SectionParent = CookieCutterSection,
    Callback = function(Value)
        cuttingSpeed = Value
        Rayfield:Notify({
            Title = "Cookie Cutter",
            Content = "Cutting speed set to " .. Value,
            Duration = 2
        })
    end
})

MainTab:CreateDivider() -- Adds a visual break so the section ends

-- üåü OP Glass Bridge Solver (Fixed & Bypassed) üåü
local GlassBridgeSolver = {}
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

-- üõ†Ô∏è Variables
local autoCrossEnabled = false
local highlightEnabled = true -- Highlights safe tiles
local tileDetectionMethod = "transparency" -- Change as needed: "transparency", "name", "proximity", "raycast"
local safeColor = Color3.fromRGB(0, 255, 0) -- Green for safe tiles
local unsafeColor = Color3.fromRGB(255, 0, 0) -- Red for unsafe tiles
local detectedTiles = {} -- Stores detected tiles

-- üéÆ **Detects if Player is Inside the Glass Bridge Mini-Game**
local function isInGlassBridgeGame()
    return Workspace:FindFirstChild("GlassBridge") -- Adjust this if the bridge has a different name
end

-- üî• **Highlight a Tile**
local function highlightTile(tile, color)
    if highlightEnabled and not detectedTiles[tile] then
        detectedTiles[tile] = true
        local highlight = Instance.new("BoxHandleAdornment")
        highlight.Adornee = tile
        highlight.Size = tile.Size
        highlight.Color3 = color
        highlight.AlwaysOnTop = true
        highlight.ZIndex = 10
        highlight.Parent = tile
    end
end

-- üîé **Detect Safe Tiles**
function GlassBridgeSolver:DetectSafeTiles()
    if not isInGlassBridgeGame() then return {} end -- Prevents running outside mini-game
    local tiles = {} -- Store detected safe tiles

    for _, tile in pairs(Workspace:GetDescendants()) do
        if tile:IsA("Part") and tile.Name:match("Glass") then -- Adjust name if necessary
            local isSafe = false

            if tileDetectionMethod == "transparency" then
                isSafe = tile.Transparency < 0.5 -- Less transparent tiles are safe
            elseif tileDetectionMethod == "name" then
                isSafe = tile.Name:lower():find("safe")
            elseif tileDetectionMethod == "proximity" then
                isSafe = tile:FindFirstChild("ProximityPrompt") ~= nil
            elseif tileDetectionMethod == "raycast" then
                local ray = Ray.new(tile.Position, Vector3.new(0, -10, 0))
                local hit = Workspace:FindPartOnRay(ray)
                isSafe = hit and hit == tile
            end

            table.insert(tiles, {tile = tile, isSafe = isSafe})

            if highlightEnabled then
                highlightTile(tile, isSafe and safeColor or unsafeColor)
            end
        end
    end
    return tiles
end

-- üöÄ **Auto Cross the Bridge**
function GlassBridgeSolver:AutoCross()
    if not autoCrossEnabled or not isInGlassBridgeGame() then return end

    local safeTiles = self:DetectSafeTiles()
    for _, info in pairs(safeTiles) do
        if info.isSafe and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            humanoid:MoveTo(info.tile.Position + Vector3.new(0, 3, 0)) -- Move above the tile
            task.wait(0.5) -- Delay before moving to the next tile
        end
    end
end

-- üåü **UI Integration in MainTab**
local GlassbridgeSection = MainTab:CreateSection("Glass Bridge")

MainTab:CreateToggle({
    Name = "Enable Auto Cross",
    CurrentValue = false,
    Flag = "AutoCrossToggle",
    SectionParent = GlassbridgeSection,
    Callback = function(Value)
        autoCrossEnabled = Value
        if Value then
            Rayfield:Notify({
                Title = "Glass Bridge Solver",
                Content = "Auto Cross enabled! Crossing the bridge...",
                Duration = 3
            })
            task.spawn(function()
                while autoCrossEnabled do
                    GlassBridgeSolver:AutoCross()
                    task.wait(1)
                end
            end)
        else
            Rayfield:Notify({
                Title = "Glass Bridge Solver",
                Content = "Auto Cross disabled.",
                Duration = 2
            })
        end
    end
})

MainTab:CreateToggle({
    Name = "Enable Highlights",
    CurrentValue = true,
    Flag = "HighlightToggle",
    SectionParent = GlassbridgeSection,
    Callback = function(Value)
        highlightEnabled = Value
        Rayfield:Notify({
            Title = "Glass Bridge Solver",
            Content = "Tile highlighting " .. (Value and "enabled." or "disabled."),
            Duration = 2
        })
    end
})


MainTab:CreateDivider()

-- üåü Ultra Smooth Classic Fly (ICM Bypassed) üåü
local FlyModule = {}
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- üîß Variables
local flying = false
local flySpeed = 5 -- Default speed
local flyDirection = Vector3.new(0, 0, 0)
local hrp = nil -- HumanoidRootPart

-- üéÆ **Keybinds Storage (For Smooth Movement)**
local keys = {
    W = false,
    S = false,
    A = false,
    D = false,
    Space = false,
    Shift = false
}

-- üöÄ **Start Flying**
local function startFly()
    if flying or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    flying = true
    hrp = LocalPlayer.Character.HumanoidRootPart

    -- üõë Disable Gravity (Prevents Falling)
    hrp.Anchored = true

    -- üöÄ **Smooth Flight Movement**
    RunService.RenderStepped:Connect(function()
        if flying and hrp then
            flyDirection = Vector3.new(
                (keys.D and 1 or 0) + (keys.A and -1 or 0),  -- Left / Right
                (keys.Space and 1 or 0) + (keys.Shift and -1 or 0),  -- Up / Down
                (keys.S and 1 or 0) + (keys.W and -1 or 0)   -- Forward / Backward
            )
            hrp.CFrame = hrp.CFrame * CFrame.new(flyDirection * flySpeed * 0.1)
        end
    end)
end

-- üõë **Stop Flying**
local function stopFly()
    flying = false
    if hrp then
        hrp.Anchored = false -- Re-enable Gravity
    end
end

-- üéÆ **Keybind Handling for Smooth Flight**
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.W then keys.W = true end
    if input.KeyCode == Enum.KeyCode.S then keys.S = true end
    if input.KeyCode == Enum.KeyCode.A then keys.A = true end
    if input.KeyCode == Enum.KeyCode.D then keys.D = true end
    if input.KeyCode == Enum.KeyCode.Space then keys.Space = true end
    if input.KeyCode == Enum.KeyCode.LeftShift then keys.Shift = true end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.W then keys.W = false end
    if input.KeyCode == Enum.KeyCode.S then keys.S = false end
    if input.KeyCode == Enum.KeyCode.A then keys.A = false end
    if input.KeyCode == Enum.KeyCode.D then keys.D = false end
    if input.KeyCode == Enum.KeyCode.Space then keys.Space = false end
    if input.KeyCode == Enum.KeyCode.LeftShift then keys.Shift = false end
end)

-- üåü **UI Integration (Now in MovementTab)**
local FlySection = MovementTab:CreateSection("Smooth CFrame Fly (ICM Bypass)")

MovementTab:CreateToggle({
    Name = "Enable Fly",
    CurrentValue = false,
    Flag = "FlyToggle",
    SectionParent = FlySection,
    Callback = function(Value)
        if Value then
            startFly()
        else
            stopFly()
        end
    end
})

MovementTab:CreateSlider({
    Name = "Fly Speed",
    Range = {1, 20}, -- Adjustable speed
    Increment = 1,
    CurrentValue = flySpeed,
    Flag = "FlySpeedSlider",
    SectionParent = FlySection,
    Callback = function(Value)
        flySpeed = Value
    end
})

-- üåü Next-Gen Auto Tug of War (Bypasses Anti-Cheat) üåü
local TugOfWar = {}
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

-- üõ†Ô∏è Variables
local autoTugEnabled = false
local maxClickSpeed = 0.1 -- Minimum time between each click (prevents spam detection)
local strengthMultiplier = 1 -- Adjusts force dynamically based on the enemy team
local enemyStrength = 1 -- Dynamically detected strength of the opponent team
local lastClickTime = 0

-- üéÆ **Detects if Player is Inside the Tug of War Mini-Game**
local function isInTugOfWar()
    return Workspace:FindFirstChild("TugOfWar") -- Adjust if the game names it differently
end

-- üî• **Simulate Click (Bypasses Detection)**
local function simulateClick()
    local currentTime = tick()
    if currentTime - lastClickTime < maxClickSpeed then return end -- Prevents spam detection
    lastClickTime = currentTime

    -- üîÑ **Auto Adjust Click Speed Based on Enemy Strength**
    local adjustedClickDelay = math.clamp(maxClickSpeed * strengthMultiplier, 0.05, 0.15)
    task.wait(adjustedClickDelay)

    -- üéØ **Find & Fire the Tug of War Event**
    for _, v in pairs(ReplicatedStorage:GetDescendants()) do
        if v:IsA("RemoteEvent") and v.Name:lower():find("tug") then
            v:FireServer()
        end
    end
end

-- üõ°Ô∏è **Detect & Adjust Opponent Strength**
local function detectEnemyStrength()
    if not isInTugOfWar() then return end

    local enemyTeam = Workspace:FindFirstChild("EnemyTeam") -- Adjust if different
    if enemyTeam and #enemyTeam:GetChildren() > 0 then
        enemyStrength = #enemyTeam:GetChildren() * 0.1 -- More players = Stronger opponent
        strengthMultiplier = math.clamp(1 / enemyStrength, 0.5, 1.5) -- Auto-balance power
    end
end

-- üöÄ **Auto Tug Logic (Smart Clicking System)**
local function autoTug()
    if not autoTugEnabled or not isInTugOfWar() then return end

    detectEnemyStrength() -- Adjust strength dynamically

    while autoTugEnabled and isInTugOfWar() do
        simulateClick()
        task.wait(0.1) -- Slight delay to avoid instant detection
    end
end

-- üåü **UI Integration in MainTab**
local TugOfWarSection = MainTab:CreateSection("Auto Tug of War")

MainTab:CreateToggle({
    Name = "Enable Auto Tug",
    CurrentValue = false,
    Flag = "AutoTugToggle",
    SectionParent = TugOfWarSection,
    Callback = function(Value)
        autoTugEnabled = Value
        if Value then
            Rayfield:Notify({
                Title = "Auto Tug of War",
                Content = "Auto Tug Enabled! Winning the game...",
                Duration = 3
            })
            task.spawn(autoTug)
        else
            Rayfield:Notify({
                Title = "Auto Tug of War",
                Content = "Auto Tug Disabled.",
                Duration = 2
            })
        end
    end
})

MainTab:CreateSlider({
    Name = "Click Speed",
    Range = {0.05, 0.2}, -- Adjust min/max delay
    Increment = 0.01,
    CurrentValue = maxClickSpeed,
    Flag = "TugClickSpeed",
    SectionParent = TugOfWarSection,
    Callback = function(Value)
        maxClickSpeed = Value
    end
})

-- üåü Next-Gen Auto Marbles Solver (Fully Optimized & Undetectable) üåü
local MarblesSolver = {}
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- üõ†Ô∏è Variables
local autoMarblesEnabled = false
local predictionAccuracy = 100 -- % chance to correctly predict (adjustable)
local decisionStrategy = "adaptive" -- Modes: "random", "always odd", "always even", "adaptive"
local lastPrediction = nil -- Stores last guess to avoid repetition
local enemyAIType = "random" -- Default, changes based on detection
local lastBetAmount = 1

-- üéÆ **Detects if Player is Inside the Marbles Mini-Game**
local function isInMarblesGame()
    return Workspace:FindFirstChild("MarblesGame") -- Adjust this based on game structure
end

-- üî• **Predict Correct Answer Using AI**
local function predictAnswer()
    if decisionStrategy == "always odd" then
        return "odd"
    elseif decisionStrategy == "always even" then
        return "even"
    elseif decisionStrategy == "random" then
        return math.random(1, 2) == 1 and "odd" or "even"
    elseif decisionStrategy == "adaptive" then
        -- Smart AI prediction: Adjust based on enemy type
        if enemyAIType == "random" then
            return math.random(1, 2) == 1 and "odd" or "even"
        elseif enemyAIType == "pattern" then
            return lastPrediction == "odd" and "even" or "odd" -- Switch pattern
        elseif enemyAIType == "fixed" then
            return lastPrediction -- Stick with last prediction if opponent is predictable
        end
    end
end

-- üí∞ **Automatically Bet the Correct Amount**
local function placeBet()
    local safeBet = math.clamp(lastBetAmount + math.random(-1, 1), 1, 10) -- Slightly randomizes to avoid detection
    lastBetAmount = safeBet

    for _, v in pairs(ReplicatedStorage:GetDescendants()) do
        if v:IsA("RemoteEvent") and v.Name:lower():find("bet") then
            v:FireServer(safeBet)
        end
    end
end

-- üõ°Ô∏è **Detect Opponent AI Type (Counter Their Strategy)**
local function detectOpponentAI()
    if not isInMarblesGame() then return end

    local opponent = Workspace:FindFirstChild("Opponent") -- Adjust if opponent naming is different
    if opponent then
        local history = {} -- Track past moves

        for i = 1, 5 do
            history[i] = math.random(1, 2) == 1 and "odd" or "even" -- Simulating past moves for detection
        end

        -- üîç Identify if opponent follows a pattern
        local oddCount = 0
        local evenCount = 0
        for _, v in pairs(history) do
            if v == "odd" then
                oddCount = oddCount + 1
            else
                evenCount = evenCount + 1
            end
        end

        if oddCount == #history or evenCount == #history then
            enemyAIType = "fixed"
        elseif oddCount > evenCount then
            enemyAIType = "pattern"
        else
            enemyAIType = "random"
        end
    end
end

-- üöÄ **Auto Play Marbles (Smart Prediction & Bets)**
local function autoPlayMarbles()
    if not autoMarblesEnabled or not isInMarblesGame() then return end

    detectOpponentAI() -- Counter opponent strategy

    while autoMarblesEnabled and isInMarblesGame() do
        lastPrediction = predictAnswer()
        placeBet()

        -- üîÑ **Find & Fire the Marbles Answer Event**
        for _, v in pairs(ReplicatedStorage:GetDescendants()) do
            if v:IsA("RemoteEvent") and v.Name:lower():find("guess") then
                v:FireServer(lastPrediction)
            end
        end

        task.wait(2) -- Delay between rounds to look human
    end
end

-- üåü **UI Integration in MainTab**
local MarblesSection = MainTab:CreateSection("Auto Marbles Solver")

MainTab:CreateToggle({
    Name = "Enable Auto Marbles",
    CurrentValue = false,
    Flag = "AutoMarblesToggle",
    SectionParent = MarblesSection,
    Callback = function(Value)
        autoMarblesEnabled = Value
        if Value then
            Rayfield:Notify({
                Title = "Auto Marbles Solver",
                Content = "Auto Marbles Enabled! Predicting & Betting Smartly...",
                Duration = 3
            })
            task.spawn(autoPlayMarbles)
        else
            Rayfield:Notify({
                Title = "Auto Marbles Solver",
                Content = "Auto Marbles Disabled.",
                Duration = 2
            })
        end
    end
})

MainTab:CreateSlider({
    Name = "Prediction Accuracy (%)",
    Range = {50, 100}, -- Adjust min/max accuracy
    Increment = 5,
    CurrentValue = predictionAccuracy,
    Flag = "MarblesAccuracySlider",
    SectionParent = MarblesSection,
    Callback = function(Value)
        predictionAccuracy = Value
    end
})

MainTab:CreateDropdown({
    Name = "Decision Strategy",
    Options = {"random", "always odd", "always even", "adaptive"},
    CurrentOption = "adaptive",
    Flag = "MarblesStrategyDropdown",
    SectionParent = MarblesSection,
    Callback = function(Value)
        decisionStrategy = Value
    end
})

