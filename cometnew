local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Comet ︱BETA",
    Icon = 0, -- Set an icon if needed
    LoadingTitle = "Comet︱BETA",
    LoadingSubtitle = "by Definity",
    Theme = "Default",
    DisableRayfieldPrompts = false
})

-- Compatibility Check
local requiredFunctions = {
    firetouchinterest = { "Kill Aura" },
    fireclickdetector = { "Auto Chest" },
    firesignal = { "Advanced Interactions" },
    getconnections = { "Event Hooks" },
    getsenv = { "Advanced Debugging" },
    getrawmetatable = { "Anti-Cheat Bypass" },
    setupvalue = { "Advanced Debugging" },
    getupvalue = { "Advanced Debugging" }
}

local passes, fails, totalFunctions = 0, 0, 0
local failedFunctions = {}

-- Function to test if a global function exists
local function testGlobal(funcName)
    totalFunctions = totalFunctions + 1
    local func = rawget(getgenv(), funcName) or _G[funcName] -- Check both getgenv and _G for flexibility

    if typeof(func) == "function" then
        passes = passes + 1
        return true
    else
        fails = fails + 1
        table.insert(failedFunctions, funcName)
        return false
    end
end

-- Perform Compatibility Tests
for funcName, _ in pairs(requiredFunctions) do
    testGlobal(funcName)
end

-- Calculate Compatibility
local compatibilityPercent = math.floor((passes / totalFunctions) * 100)
local executorInfo = identifyexecutor and identifyexecutor() or "Unknown Executor"

-- Notify User
Rayfield:Notify({
    Title = "Executor Compatibility Check",
    Content = "Executor: " .. executorInfo ..
        "\nCompatibility: " .. compatibilityPercent .. "% of required functions supported.",
    Duration = 10,
    Image = 4483362458 -- Replace with your desired image ID
})

-- Add Executor Info to Rayfield UI
local ExecutorTab = Window:CreateTab("Executor Info", 4483362458) -- Executor Info Tab
ExecutorTab:CreateSection("UNC Compatibility Check")
ExecutorTab:CreateLabel("Executor: " .. executorInfo)
ExecutorTab:CreateLabel("Compatibility: " .. compatibilityPercent .. "%")
ExecutorTab:CreateLabel("Functions Passed: " .. passes)
ExecutorTab:CreateLabel("Functions Failed: " .. fails)

-- Add Failed Functions to Tab
if #failedFunctions > 0 then
    ExecutorTab:CreateSection("Failed Functions")
    for _, funcName in ipairs(failedFunctions) do
        ExecutorTab:CreateLabel(funcName .. ": ❌")
    end
else
    ExecutorTab:CreateLabel("All functions passed successfully! ✅")
end

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

PlayerTab:CreateSlider({
    Name = "Walkspeed",
    Range = {0, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 10,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game.Players.LocalPlayer.Character:SetAttribute("SpeedMultiplier", Value)
    end,
})

PlayerTab:CreateSlider({
    Name = "Dash Length",
    Range = {0, 100},
    Increment = 1,
    Suffix = "Length",
    CurrentValue = 10,
    Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game.Players.LocalPlayer.Character:SetAttribute("DashLength", Value)
    end,
})

PlayerTab:CreateSlider({
    Name = "Jump Height",
    Range = {0, 1000},
    Increment = 1,
    Suffix = "Height",
    CurrentValue = 10,
    Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
    end,
})

PlayerTab:CreateSlider({
    Name = "Max Health",
    Range = {0, 1000},
    Increment = 1,
    Suffix = "Maxhealth",
    CurrentValue = 10,
    Flag = "Slider4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.MaxHealth = Value
    end,
})
-- START OF AUTO KILL --

-- Auto Kill v2.0: Optimized for Smooth Performance
local autoKillActive = false
local autoTeleport = true -- Toggle teleportation
local autoUseAbilitiesActive = false -- Toggle auto-use abilities
local clickInterval = 0.1 -- Reduced interval for smoother clicks
local teleportSmoothing = 0.1 -- Time to blend teleportation
local abilityCooldowns = {
    ["Z"] = 3, -- Cooldown for Z ability
    ["X"] = 5, -- Cooldown for X ability
    ["C"] = 7, -- Cooldown for C ability
    ["V"] = 10 -- Cooldown for V ability
}
local lastAbilityUse = {} -- Tracks ability usage times
local VirtualInputManager = game:GetService("VirtualInputManager")
local currentBestWeapon = nil -- Cache for the best weapon

-- Full Weapon Rankings (higher is better)
local weaponRankings = {
    ["Dark Blade"] = 100, -- Top-tier legendary weapon
    ["Tushita"] = 98,
    ["Yoru (V2)"] = 97,
    ["Rengoku"] = 95,
    ["Pole (2nd Form)"] = 90,
    ["Shisui"] = 85,
    ["Warden Sword"] = 80,
    ["Canvander"] = 78,
    ["Soul Cane"] = 75,
    ["Midnight Blade"] = 70,
    ["Saber (V2)"] = 65,
    ["Dragon Trident"] = 64,
    ["Buddy Sword"] = 62,
    ["Dual-Headed Blade"] = 60,
    ["Hallow Scythe"] = 59,
    ["Bisento"] = 55,
    ["True Triple Katana"] = 54,
    ["Trident"] = 52,
    ["Dark Dagger"] = 50,
    ["Pole (1st Form)"] = 49,
    ["Iron Mace"] = 47,
    ["Triple Katana"] = 45,
    ["Longsword"] = 43,
    ["Katana"] = 40,
    ["Cutlass"] = 38,
    ["Dual Katana"] = 37,
    ["Shark Saw"] = 35,
    ["Twin Hooks"] = 33,
    ["Gravity Cane"] = 32,
    ["Iron Scythe"] = 31,
    ["Pipe"] = 30,
    ["Jitte"] = 28,
    ["Twin Daggers"] = 26,
    ["Electro"] = 25,
    ["Water Kung Fu"] = 24,
    ["Dragon Breath"] = 23,
    ["Superhuman"] = 22,
    ["Death Step"] = 21,
    ["Sharkman Karate"] = 20,
    ["Electric Claw"] = 19,
    ["Dragon Talon"] = 18,
    ["Combat"] = 1 -- Default tool
}

-- Function to determine the best weapon in the player's inventory (runs once)
local function determineBestWeapon()
    local player = game.Players.LocalPlayer
    local backpack = player.Backpack
    local bestWeapon = nil
    local bestRank = -math.huge

    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and weaponRankings[tool.Name] then
            local rank = weaponRankings[tool.Name]
            if rank > bestRank then
                bestWeapon = tool
                bestRank = rank
            end
        end
    end

    currentBestWeapon = bestWeapon -- Cache the best weapon
end

-- Function to find the closest enemy
local function findClosestEnemy()
    local player = game.Players.LocalPlayer
    local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return nil end

    local closestEnemy = nil
    local shortestDistance = math.huge

    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
        if enemy:IsA("Model") and enemy.Name == "Bandit" and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
            local distance = (enemy.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestEnemy = enemy
            end
        end
    end
    return closestEnemy
end

-- Function to teleport smoothly to the enemy
local function teleportSmoothly(playerRoot, targetCFrame)
    if not playerRoot then return end
    local initialCFrame = playerRoot.CFrame
    local startTime = tick()

    while tick() - startTime < teleportSmoothing do
        local alpha = (tick() - startTime) / teleportSmoothing
        playerRoot.CFrame = initialCFrame:Lerp(targetCFrame, alpha)
        task.wait()
    end

    playerRoot.CFrame = targetCFrame -- Finalize position
end

-- Function to simulate targeted mouse clicking
local function simulateTargetedMouseClick(target)
    local camera = game.Workspace.CurrentCamera
    local screenPosition, onScreen = camera:WorldToViewportPoint(target.Position)
    if onScreen then
        VirtualInputManager:SendMouseButtonEvent(
            screenPosition.X, -- Target position on screen
            screenPosition.Y, -- Target position on screen
            0, -- MouseButton1 (Left Click)
            true, -- Button down
            game, -- Target instance
            0 -- Input delay
        )
        task.wait(0.02) -- Brief delay between down and up events
        VirtualInputManager:SendMouseButtonEvent(
            screenPosition.X,
            screenPosition.Y,
            0, -- MouseButton1 (Left Click)
            false, -- Button up
            game,
            0
        )
    end
end

-- Function to attack the enemy directly
local function attackEnemy(enemy)
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return end

    local humanoid = enemy:FindFirstChild("Humanoid")
    local humanoidRootPart = enemy:FindFirstChild("HumanoidRootPart")

    if humanoid and humanoidRootPart and currentBestWeapon then
        -- Equip the cached best weapon
        if not currentBestWeapon:IsDescendantOf(character) then
            character.Humanoid:EquipTool(currentBestWeapon)
        end

        -- Simulate targeted mouse clicking to attack
        simulateTargetedMouseClick(humanoidRootPart)
    end
end

-- Function to handle teleportation
local function teleportToEnemy(enemy)
    if not autoTeleport then return end
    local player = game.Players.LocalPlayer
    local character = player.Character
    local playerRoot = character and character:FindFirstChild("HumanoidRootPart")
    local humanoidRootPart = enemy:FindFirstChild("HumanoidRootPart")

    if playerRoot and humanoidRootPart then
        teleportSmoothly(playerRoot, humanoidRootPart.CFrame * CFrame.new(0, 0, -3)) -- Smooth teleport
    end
end

-- Function to handle auto-killing logic
local function autoKill()
    determineBestWeapon() -- Find the best weapon once when starting auto-kill
    while autoKillActive do
        local closestEnemy = findClosestEnemy()
        if closestEnemy then
            teleportToEnemy(closestEnemy) -- Teleport only if enabled
            attackEnemy(closestEnemy) -- Attack the enemy
        end
        task.wait(clickInterval) -- Smooth the process
    end
end

-- Auto Kill Toggle
local FarmingTab = Window:CreateTab("Farming", 4483362458) -- Farming Tab
FarmingTab:CreateToggle({
    Name = "Auto Kill Bandits",
    CurrentValue = false,
    Flag = "Toggle6", -- Unique flag for Auto Kill toggle
    Callback = function(Value)
        autoKillActive = Value

        if autoKillActive then
            task.spawn(autoKill)
        else
            print("Auto Kill disabled.")
        end
    end,
})

-- Auto Teleport Toggle
FarmingTab:CreateToggle({
    Name = "Auto Teleport to Enemy",
    CurrentValue = true,
    Flag = "Toggle7", -- Unique flag for Auto Teleport toggle
    Callback = function(Value)
        autoTeleport = Value
        if autoTeleport then
            print("Auto Teleport enabled.")
        else
            print("Auto Teleport disabled.")
        end
    end,
})

-- Auto Use Abilities Toggle
FarmingTab:CreateToggle({
    Name = "Auto Use Abilities",
    CurrentValue = false,
    Flag = "Toggle8", -- Unique flag for Auto Use Abilities toggle
    Callback = function(Value)
        autoUseAbilitiesActive = Value

        if autoUseAbilitiesActive then
            task.spawn(autoUseAbilities)
        else
            print("Auto Use Abilities disabled.")
        end
    end,
})

-- END OF AUTO KILL --


-- Auto Upgrade Stats Feature
local autoUpgradeActive = false

-- Function to upgrade a specific stat
local function upgradeStat(statName)
    local statFunction = game:GetService("ReplicatedStorage").Remotes.CommF_

    -- Attempt to invoke the game's stat upgrade function
    local success, result = pcall(function()
        return statFunction:InvokeServer("AddPoint", statName)
    end)

    if not success then
        warn("Failed to upgrade stat:", statName, result) -- Log errors without breaking the script
    else
        print("Successfully upgraded stat:", statName)
    end
end

-- Auto Upgrade Stats Toggle
FarmingTab:CreateToggle({
    Name = "Auto Upgrade Stats",
    CurrentValue = false,
    Flag = "Toggle7", -- Unique flag for Auto Upgrade Stats toggle
    Callback = function(Value)
        autoUpgradeActive = Value

        if autoUpgradeActive then
            task.spawn(function()
                while autoUpgradeActive do
                    local player = game.Players.LocalPlayer
                    local data = player:FindFirstChild("Data")
                    if data and data:FindFirstChild("Points") then
                        local availablePoints = data.Points.Value
                        if availablePoints > 0 then
                            -- Randomly select a stat to upgrade based on weighted chances
                            local randomValue = math.random(1, 100)

                            if randomValue <= 50 then
                                upgradeStat("Melee") -- 50% chance
                            elseif randomValue <= 70 then
                                upgradeStat("Defense") -- 20% chance
                            elseif randomValue <= 85 then
                                upgradeStat("Sword") -- 15% chance
                            elseif randomValue <= 95 then
                                upgradeStat("Gun") -- 10% chance
                            elseif randomValue <= 100 then
                                upgradeStat("Bloxfruit") -- 5% chance
                            end
                        else
                            print("No stat points available to spend.")
                        end
                    else
                        print("Player data or points not found.")
                    end
                    task.wait(0.5) -- Check for available points every 0.5 seconds
                end
            end)
        end
    end,
})

-- Function to reinject the script
local function reinjectScript()
    local scriptUrl = 'https://raw.githubusercontent.com/realdefinity/comet/refs/heads/main/cometnew' -- Replace with your script's URL
    local success, err = pcall(function()
        loadstring(game:HttpGet(scriptUrl))()
    end)

    if success then
        Rayfield:Notify({
            Title = "Reinject Successful",
            Content = "The script has been successfully reinjected!",
            Duration = 6,
        })
    else
        Rayfield:Notify({
            Title = "Reinject Failed",
            Content = "Error: " .. tostring(err),
            Duration = 6,
        })
    end
end

-- Add Reinject Button to UI
local MiscTab = Window:CreateTab("Misc", 4483362458) -- Misc Tab
MiscTab:CreateButton({
    Name = "Reinject Script",
    Callback = function()
        reinjectScript()
    end
})

-- Function to uninject the script
local function uninjectScript()
    for _, connection in pairs(getconnections(game:GetService("RunService").Stepped)) do
        connection:Disable()
    end
    Rayfield:Destroy() -- Destroys the Rayfield UI
    Rayfield:Notify({
        Title = "Uninject Successful",
        Content = "The script has been successfully removed.",
        Duration = 6,
    })
end

-- Add Uninject Button to UI
MiscTab:CreateButton({
    Name = "Uninject Script",
    Callback = function()
        uninjectScript()
    end
})
-- Function to prevent AFK detection
local function antiAFK()
    local player = game.Players.LocalPlayer
    local virtualUser = game:service("VirtualUser")

    -- Connect to the idle event
    player.Idled:Connect(function()
        virtualUser:CaptureController()
        virtualUser:ClickButton2(Vector2.new(0, 0))
        Rayfield:Notify({
            Title = "Anti-AFK Active",
            Content = "You will not be kicked for being AFK.",
            Duration = 4,
        })
    end)
end

-- Activate Anti-AFK
antiAFK()

-- Add a toggle to the UI
MiscTab:CreateToggle({
    Name = "Anti-AFK",
    CurrentValue = true, -- Default to enabled
    Flag = "Toggle_AntiAFK",
    Callback = function(Value)
        if Value then
            antiAFK()
        end
    end
})

local fpsBoostActive = false

-- Function to enable FPS Booster
local function enableFPSBooster()
    for _, v in pairs(game:GetDescendants()) do
        if v:IsA("BasePart") or v:IsA("Decal") or v:IsA("ParticleEmitter") or v:IsA("Beam") then
            v.Transparency = 1
            if v:IsA("BasePart") then
                v.Material = Enum.Material.SmoothPlastic
            elseif v:IsA("Decal") or v:IsA("Texture") then
                v:Destroy()
            end
        elseif v:IsA("Light") then
            v.Enabled = false
        end
    end

    -- Disable global settings for rendering
    game:GetService("Lighting").GlobalShadows = false
    game:GetService("Lighting").FogEnd = 9e9
    game:GetService("Lighting").Brightness = 0

    fpsBoostActive = true
    Rayfield:Notify({
        Title = "FPS Booster Enabled",
        Content = "Rendering optimizations applied.",
        Duration = 4,
    })
end

-- Function to disable FPS Booster
local function disableFPSBooster()
    game:GetService("Lighting").GlobalShadows = true
    game:GetService("Lighting").FogEnd = 1000
    game:GetService("Lighting").Brightness = 2

    fpsBoostActive = false
    Rayfield:Notify({
        Title = "FPS Booster Disabled",
        Content = "Rendering settings restored.",
        Duration = 4,
    })
end

-- Add Toggle for FPS Booster in the Misc Tab
MiscTab:CreateToggle({
    Name = "FPS Booster",
    CurrentValue = false, -- Default to off
    Flag = "Toggle_FPSBooster",
    Callback = function(Value)
        if Value and not fpsBoostActive then
            enableFPSBooster()
        elseif not Value and fpsBoostActive then
            disableFPSBooster()
        end
    end
})
-- Available Themes
local themes = {
    "Default",
    "Amber Glow",
    "Amethyst",
    "Bloom",
    "Dark Blue",
    "Green",
    "Light",
    "Ocean",
    "Serenity"
}

-- Theme Identifier Mapping
local themeIdentifiers = {
    ["Default"] = "Default",
    ["Amber Glow"] = "AmberGlow",
    ["Amethyst"] = "Amethyst",
    ["Bloom"] = "Bloom",
    ["Dark Blue"] = "DarkBlue",
    ["Green"] = "Green",
    ["Light"] = "Light",
    ["Ocean"] = "Ocean",
    ["Serenity"] = "Serenity"
}

-- Function to Change UI Theme
local function changeTheme(selectedTheme)
    local themeIdentifier = themeIdentifiers[selectedTheme]
    if themeIdentifier then
        Rayfield:ChangeTheme(themeIdentifier)
        Rayfield:Notify({
            Title = "UI Theme Changed",
            Content = "New Theme: " .. selectedTheme,
            Duration = 4,
        })
    else
        Rayfield:Notify({
            Title = "Theme Error",
            Content = "Invalid theme selected.",
            Duration = 4,
        })
    end
end

-- Add UI Customization Tab
local UITab = Window:CreateTab("UI Customization", 4483362458) -- UI Tab

-- Theme Selector
UITab:CreateDropdown({
    Name = "Select UI Theme",
    Options = themes,
    CurrentOption = "Default",
    Flag = "Dropdown_UITheme",
    Callback = function(selectedTheme)
        changeTheme(selectedTheme)
    end
})

-- UI Reset Button
UITab:CreateButton({
    Name = "Reset UI Position",
    Callback = function()
        Rayfield:Destroy() -- Destroy and reload the UI
        Rayfield:Reload()
        Rayfield:Notify({
            Title = "UI Reset",
            Content = "UI position and layout have been reset.",
            Duration = 4,
        })
    end
})

-- START OF AUTO BOSS ---------------------------------------------------------------------------------------------------------------------------------

local autoBossActive = false
local pathfindingService = game:GetService("PathfindingService")
local player = game.Players.LocalPlayer

-- Define Boss Data
local bossData = {
    ["The Saw"] = {Position = Vector3.new(-1104, 5, 4357)},
    ["Mob Leader"] = {Position = Vector3.new(-2848, 7, 5353)},
    ["Saber Expert"] = {Position = Vector3.new(-1428, 29, -749)},
    ["Warden"] = {Position = Vector3.new(-4200, 210, 4300)},
    ["Chief Warden"] = {Position = Vector3.new(-4300, 210, 4300)},
    ["Swan"] = {Position = Vector3.new(-4500, 210, 4300)},
    ["Ice Admiral"] = {Position = Vector3.new(700, 390, -6800)},
    ["Don Swan"] = {Position = Vector3.new(-3900, 210, 4600)}
}

-- === Step 1: Security Kick Prevention ===
local function preventSecurityKick()
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    local oldNamecall = mt.__namecall

    mt.__namecall = function(self, ...)
        local method = getnamecallmethod()
        if tostring(self) == "Players" and method == "Kick" then
            warn("[Anti-Cheat] Kick attempt blocked!")
            return
        end
        return oldNamecall(self, ...)
    end

    setreadonly(mt, true)
    print("[Anti-Cheat Bypass] Security kick prevention enabled.")
end

-- === Step 2: Notify Player ===
local function notify(title, content, duration)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = duration or 5,
    })
end

-- === Step 3: Find a Boss ===
local function findBoss(bossName)
    local enemiesFolder = workspace:FindFirstChild("Enemies")
    if not enemiesFolder then
        warn("[Auto Boss] Enemies folder not found.")
        return nil
    end

    for _, enemy in pairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") and enemy.Name:lower():find(bossName:lower()) and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
            return enemy
        end
    end

    return nil
end

-- === Step 4: Pathfinding-Based Teleportation ===
local function safeTeleport(targetPosition)
    local character = player.Character
    local humanoid = character and character:FindFirstChild("Humanoid")
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

    if humanoid and humanoidRootPart then
        local path = pathfindingService:CreatePath({
            AgentRadius = 2,
            AgentHeight = 5,
            AgentCanJump = true,
            AgentJumpHeight = 10,
            AgentMaxSlope = 45,
        })

        path:ComputeAsync(humanoidRootPart.Position, targetPosition)
        if path.Status == Enum.PathStatus.Complete then
            for _, waypoint in pairs(path:GetWaypoints()) do
                humanoid:MoveTo(waypoint.Position)
                humanoid.MoveToFinished:Wait()
                task.wait(0.1) -- Simulate realistic movement
            end
        else
            warn("[Auto Boss] Pathfinding failed to compute a valid path.")
            humanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(math.random(-5, 5), 0, math.random(-5, 5))) -- Teleport fallback
        end
    end
end

-- === Step 5: Equip the Best Weapon ===
local function equipBestWeapon()
    local character = player.Character or player.CharacterAdded:Wait()
    local backpack = player.Backpack
    local tools = {}

    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            table.insert(tools, tool)
        end
    end

    table.sort(tools, function(a, b)
        return a.Name > b.Name -- Alphabetical ranking (replace with your ranking logic)
    end)

    local bestWeapon = tools[1]
    if bestWeapon and not bestWeapon:IsDescendantOf(character) then
        character.Humanoid:EquipTool(bestWeapon)
        notify("Weapon Equipped", "Equipped: " .. bestWeapon.Name, 3)
    end
end

-- === Step 6: Attack a Boss ===
local function attackBoss(boss)
    local character = player.Character
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

    if humanoidRootPart and boss and boss:FindFirstChild("HumanoidRootPart") then
        repeat
            humanoidRootPart.CFrame = boss.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0) -- Stay slightly above
            local combatTool = character:FindFirstChildOfClass("Tool")
            if combatTool then
                combatTool:Activate()
            end
            task.wait(math.random(0.2, 0.4)) -- Randomized delay
        until not boss or not boss:FindFirstChild("Humanoid") or boss.Humanoid.Health <= 0 or not autoBossActive
    end
end

-- === Step 7: Main Auto Boss Logic ===
local function autoBossFarm()
    preventSecurityKick() -- Enable security kick prevention

    while autoBossActive do
        for bossName, data in pairs(bossData) do
            if not autoBossActive then break end
            local boss = findBoss(bossName)

            if boss then
                notify("Boss Found", "Engaging: " .. bossName, 3)
                safeTeleport(boss.HumanoidRootPart.Position)
                equipBestWeapon()
                attackBoss(boss)
            else
                notify("Searching for Boss", "Checking spawn for: " .. bossName, 3)
                safeTeleport(data.Position)
                task.wait(math.random(2, 4)) -- Respawn wait
            end
        end
        task.wait(math.random(3, 5)) -- Delay between scans
    end
end

-- === Step 8: Toggle Auto Boss ===
FarmingTab:CreateToggle({
    Name = "Ultimate Auto Boss",
    CurrentValue = false,
    Flag = "Toggle_UltimateAutoBoss",
    Callback = function(Value)
        autoBossActive = Value
        if autoBossActive then
            notify("Auto Boss", "Starting the ultimate boss farm.", 5)
            task.spawn(autoBossFarm)
        else
            notify("Auto Boss", "Stopped the ultimate boss farm.", 5)
        end
    end,
})


-- END OF AUTO BOSS ---------------------------------------------------------------------------------------------------------------------------------

-- Function to queue on teleport and hop to a new server
local function serverHop()
    local newServerId = getNewServer()
    if newServerId then
        -- Queue on teleport: this script will rerun in the new server
        queue_on_teleport = queue_on_teleport or syn.queue_on_teleport or fluxus.queue_on_teleport
        if queue_on_teleport then
            queue_on_teleport([[loadstring(game:HttpGet('https://pastebin.com/raw/u45QHeEA'))()]]) -- Replace with your script URL
        end

        -- Notify and teleport
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, newServerId, game.Players.LocalPlayer)
        Rayfield:Notify({
            Title = "Server Hop",
            Content = "Joining a new server...",
            Duration = 6,
        })
    else
        Rayfield:Notify({
            Title = "Server Hop Failed",
            Content = "No suitable servers found.",
            Duration = 6,
        })
    end
end

-- Add Server Hop Button to the Misc Tab
MiscTab:CreateButton({
    Name = "Server Hop",
    Callback = function()
        serverHop()
    end
})

-- UI STATS ---------------------------------------------------------------------------------------------------------------------------------

-- Add a Stats Panel to the Rayfield UI
local statsSection = FarmingTab:CreateSection("Stats") -- Create a new section for stats
local currentBossLabel = statsSection:CreateLabel("Current Boss: None") -- Label for the current boss
local bossesKilledLabel = statsSection:CreateLabel("Bosses Killed: 0") -- Label for total bosses killed
local dropsCollectedLabel = statsSection:CreateLabel("Drops Collected: 0") -- Label for total drops collected

-- Variables to Track Stats
local currentBossName = "None"
local bossesKilled = 0
local dropsCollected = 0

-- Update Stats Function
local function updateStats()
    currentBossLabel:Set("Current Boss: " .. currentBossName)
    bossesKilledLabel:Set("Bosses Killed: " .. tostring(bossesKilled))
    dropsCollectedLabel:Set("Drops Collected: " .. tostring(dropsCollected))
end

-- Functions to Modify Stats
local function setCurrentBoss(name)
    currentBossName = name
    updateStats()
end

local function incrementBossesKilled()
    bossesKilled = bossesKilled + 1
    updateStats()
end

local function incrementDropsCollected()
    dropsCollected = dropsCollected + 1
    updateStats()
end

-- Example Usage (Integrate These into Your Script Logic)
-- Call `setCurrentBoss("Boss Name")` when targeting a boss
-- Call `incrementBossesKilled()` when a boss is defeated
-- Call `incrementDropsCollected()` when loot is collected

-- END OF UI STATS ---------------------------------------------------------------------------------------------------------------------------------



-- BOSS RESPAWN TIMER ---------------------------------------------------------------------------------------------------------------------------------

-- Boss Respawn Timer Variables
local bossRespawnTimes = {
    ["The Saw"] = 900, -- 15 minutes
    ["Mob Leader"] = 1200, -- 20 minutes
    ["Saber Expert"] = 1800, -- 30 minutes
    ["Warden"] = 600, -- 10 minutes
    ["Chief Warden"] = 600,
    ["Swan"] = 1200,
    ["Ice Admiral"] = 900,
    ["Don Swan"] = 3600 -- 1 hour
}
local respawnTimers = {} -- Tracks respawn end times for each boss

-- Rayfield Section for Respawn Timers
local respawnSection = FarmingTab:CreateSection("Respawn Timers")
local respawnLabels = {}

-- Create Labels for Each Boss in Rayfield
for bossName, _ in pairs(bossRespawnTimes) do
    respawnLabels[bossName] = respawnSection:CreateLabel(bossName .. ": Ready")
end

-- Update Respawn Timers Function
local function updateRespawnTimers()
    for bossName, endTime in pairs(respawnTimers) do
        local remainingTime = math.max(0, endTime - os.time())
        if remainingTime > 0 then
            local minutes = math.floor(remainingTime / 60)
            local seconds = remainingTime % 60
            respawnLabels[bossName]:Set(bossName .. ": " .. string.format("%02d:%02d", minutes, seconds))
        else
            respawnLabels[bossName]:Set(bossName .. ": Ready")
        end
    end
end

-- Set Respawn Timer for a Boss
local function setRespawnTimer(bossName)
    if bossRespawnTimes[bossName] then
        respawnTimers[bossName] = os.time() + bossRespawnTimes[bossName]
        Rayfield:Notify({
            Title = "Boss Defeated",
            Content = bossName .. " will respawn in " .. bossRespawnTimes[bossName] / 60 .. " minutes.",
            Duration = 5,
        })
    end
end

-- Timer Update Loop (Updates Every Second)
task.spawn(function()
    while true do
        updateRespawnTimers()
        task.wait(1) -- Update every second
    end
end)

-- Example Usage
-- Call `setRespawnTimer("The Saw")` when a boss is defeated in your farming logic

-- END OF BOSS RESPAWN TIMER ---------------------------------------------------------------------------------------------------------------------------------


-- AUTO COLLECT DROPS ---------------------------------------------------------------------------------------------------------------------------------

-- Auto Collect Drops Variables
local autoCollectDropsActive = false
local collectionRange = 50 -- Max distance to collect drops
local dropsFolderName = "Drops" -- Replace with the actual folder name for drops if known

-- Function to Collect Drops
local function collectDrops()
    local dropsFolder = workspace:FindFirstChild(dropsFolderName)
    if not dropsFolder then
        warn("[Auto Collect Drops] Drops folder not found.")
        return
    end

    local player = game.Players.LocalPlayer
    local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

    if humanoidRootPart then
        for _, drop in pairs(dropsFolder:GetChildren()) do
            if drop:IsA("BasePart") and (drop.Position - humanoidRootPart.Position).Magnitude <= collectionRange then
                -- Move to the drop and collect it
                humanoidRootPart.CFrame = CFrame.new(drop.Position)
                task.wait(0.2) -- Small delay to mimic interaction

                -- Notify and update stats
                incrementDropsCollected()
                Rayfield:Notify({
                    Title = "Drop Collected",
                    Content = "Collected: " .. (drop.Name or "Unknown Drop"),
                    Duration = 3,
                })

                -- Destroy the drop (optional, depends on game mechanics)
                drop:Destroy()
            end
        end
    end
end

-- Auto Collect Drops Toggle
FarmingTab:CreateToggle({
    Name = "Auto Collect Drops",
    CurrentValue = false,
    Flag = "Toggle_AutoCollectDrops",
    Callback = function(Value)
        autoCollectDropsActive = Value
        if autoCollectDropsActive then
            Rayfield:Notify({
                Title = "Auto Collect Drops",
                Content = "Enabled auto collection of drops.",
                Duration = 3,
            })
            -- Start the drop collection loop
            task.spawn(function()
                while autoCollectDropsActive do
                    collectDrops()
                    task.wait(1) -- Check for drops every second
                end
            end)
        else
            Rayfield:Notify({
                Title = "Auto Collect Drops",
                Content = "Disabled auto collection of drops.",
                Duration = 3,
            })
        end
    end,
})

-- END OF AUTO COLLECT DROPS ---------------------------------------------------------------------------------------------------------------------------------


-- DETECTION COLLECTION ---------------------------------------------------------------------------------------------------------------------------------

-- Fruit Detection & Collection Variables
local detectionCollectionActive = false
local fruitFolderName = "Fruits" -- Replace with the actual folder name for fruits if known
local scanInterval = 5 -- Time in seconds between scans

-- Function to Find and Collect Fruits
local function detectAndCollectFruits()
    local fruitsFolder = workspace:FindFirstChild(fruitFolderName)
    if not fruitsFolder then
        warn("[Fruit Detection] Fruits folder not found.")
        return
    end

    local player = game.Players.LocalPlayer
    local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

    if humanoidRootPart then
        for _, fruit in pairs(fruitsFolder:GetChildren()) do
            if fruit:IsA("BasePart") then
                -- Notify user about the fruit detection
                Rayfield:Notify({
                    Title = "Fruit Detected",
                    Content = "Found: " .. (fruit.Name or "Unknown Fruit"),
                    Duration = 5,
                })

                -- Teleport to the fruit
                humanoidRootPart.CFrame = CFrame.new(fruit.Position)
                task.wait(0.5) -- Wait to ensure collection

                -- Notify user about the collection
                Rayfield:Notify({
                    Title = "Fruit Collected",
                    Content = "Collected: " .. (fruit.Name or "Unknown Fruit"),
                    Duration = 5,
                })

                -- Destroy the fruit (optional, depends on game mechanics)
                fruit:Destroy()
            end
        end
    end
end

-- Fruit Detection Toggle
FarmingTab:CreateToggle({
    Name = "Detection Collection",
    CurrentValue = false,
    Flag = "Toggle_FruitDetection",
    Callback = function(Value)
        detectionCollectionActive = Value
        if detectionCollectionActive then
            Rayfield:Notify({
                Title = "Detection Collection",
                Content = "Enabled fruit detection and collection.",
                Duration = 3,
            })
            -- Start the fruit detection loop
            task.spawn(function()
                while detectionCollectionActive do
                    detectAndCollectFruits()
                    task.wait(scanInterval) -- Wait before next scan
                end
            end)
        else
            Rayfield:Notify({
                Title = "Detection Collection",
                Content = "Disabled fruit detection and collection.",
                Duration = 3,
            })
        end
    end,
})

-- END OF DETECTION COLLECTION ---------------------------------------------------------------------------------------------------------------------------------

-- START OF KILL AURA ---------------------------------------------------------------------------------------------------------------------------------

-- Add Kill Aura Features to PlayerTab

-- Variables
getgenv().KillAuraActive = false
getgenv().KillAuraRange = 15 -- Default range in studs

-- Kill Aura Toggle
PlayerTab:CreateToggle({
    Name = "Kill Aura",
    CurrentValue = false,
    Flag = "KillAuraToggle",
    Callback = function(Value)
        getgenv().KillAuraActive = Value
        if Value then
            startKillAura()
        end
    end
})

-- Kill Aura Range Slider
PlayerTab:CreateSlider({
    Name = "Kill Aura Range",
    Range = {5, 50}, -- Min and Max range in studs
    Increment = 1,
    Suffix = " Studs",
    CurrentValue = getgenv().KillAuraRange,
    Flag = "KillAuraRange",
    Callback = function(Value)
        getgenv().KillAuraRange = Value
    end
})

-- Function to Start Kill Aura
function startKillAura()
    spawn(function()
        while getgenv().KillAuraActive do
            local player = game.Players.LocalPlayer
            local character = player.Character
            local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                    if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") and enemy:FindFirstChildOfClass("Humanoid") then
                        local enemyHRP = enemy.HumanoidRootPart
                        local distance = (humanoidRootPart.Position - enemyHRP.Position).Magnitude
                        if distance <= getgenv().KillAuraRange then
                            -- Perform the attack
                            local combatTool = player.Backpack:FindFirstChildOfClass("Tool") or character:FindFirstChildOfClass("Tool")
                            if combatTool then
                                -- Equip the combat tool
                                character.Humanoid:EquipTool(combatTool)
                                -- Teleport near the enemy
                                humanoidRootPart.CFrame = enemyHRP.CFrame * CFrame.new(0, 0, -3)
                                -- Activate the tool to attack
                                combatTool:Activate()
                            end
                        end
                    end
                end
            end
            task.wait(0.1) -- Small delay to prevent excessive loop execution
        end
    end)
end

-- END OF KILL AURA ---------------------------------------------------------------------------------------------------------------------------------

-- START OF AUTO MONEY  ---------------------------------------------------------------------------------------------------------------------------------

-- Auto Chest Collect Toggle for PlayerTab

-- Variables
getgenv().AutoChestCollect = false
local MaxSpeed = 300 -- Studs per second
local LocalPlayer = game:GetService("Players").LocalPlayer
local UncheckedChests = {}
local FirstRun = true

-- Helper Functions
local function getCharacter()
    if not LocalPlayer.Character then
        LocalPlayer.CharacterAdded:Wait()
    end
    LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    return LocalPlayer.Character
end

local function DistanceFromPlrSort(ObjectList)
    local RootPart = getCharacter().HumanoidRootPart
    table.sort(ObjectList, function(ChestA, ChestB)
        local RootPos = RootPart.Position
        local DistanceA = (RootPos - ChestA.Position).Magnitude
        local DistanceB = (RootPos - ChestB.Position).Magnitude
        return DistanceA < DistanceB
    end)
end

local function getChestsSorted()
    if FirstRun then
        FirstRun = false
        local Objects = game:GetDescendants()
        for _, Object in pairs(Objects) do
            if Object.Name:find("Chest") and Object.ClassName == "Part" then
                table.insert(UncheckedChests, Object)
            end
        end
    end
    local Chests = {}
    for _, Chest in pairs(UncheckedChests) do
        if Chest:FindFirstChild("TouchInterest") then
            table.insert(Chests, Chest)
        end
    end
    DistanceFromPlrSort(Chests)
    return Chests
end

local function toggleNoclip(Toggle)
    for _, v in pairs(getCharacter():GetChildren()) do
        if v:IsA("BasePart") then
            v.CanCollide = not Toggle
        end
    end
end

local function Teleport(Goal, Speed)
    if not Speed then
        Speed = MaxSpeed
    end
    toggleNoclip(true)
    local RootPart = getCharacter().HumanoidRootPart
    local Magnitude = (RootPart.Position - Goal.Position).Magnitude

    while not (Magnitude < 1) and getgenv().AutoChestCollect do
        local Direction = (Goal.Position - RootPart.Position).unit
        RootPart.CFrame = RootPart.CFrame + Direction * (Speed * task.wait())
        Magnitude = (RootPart.Position - Goal.Position).Magnitude
    end
    toggleNoclip(false)
end

local function collectChests()
    while getgenv().AutoChestCollect do
        local Chests = getChestsSorted()
        if #Chests > 0 then
            Teleport(Chests[1].CFrame)
        else
            task.wait(2) -- Wait for chests to respawn or add server-hop logic here
        end
        task.wait(0.1) -- Adjust for performance
    end
end

-- Auto Chest Collect Toggle (Rayfield)
PlayerTab:CreateToggle({
    Name = "Auto Chest Collect",
    CurrentValue = false,
    Flag = "Toggle1", -- Ensure unique flag for this toggle
    Callback = function(Value)
        getgenv().AutoChestCollect = Value
        if Value then
            task.spawn(collectChests)
        end
    end
})

-- Optional Slider to Adjust Speed
PlayerTab:CreateSlider({
    Name = "Chest Collection Speed",
    Range = {100, 500}, -- Speed range (studs per second)
    Increment = 10,
    Suffix = " Speed",
    CurrentValue = MaxSpeed,
    Flag = "Slider1", -- Ensure unique flag for this slider
    Callback = function(Value)
        MaxSpeed = Value
    end
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Variables
local AimbotEnabled = false
local AimSmoothness = 0.1 -- Smoothness factor
local FOV = 300 -- Field of View for targeting
local FOVCircle = Drawing.new("Circle")
local Target = nil

-- FOV Circle Settings
FOVCircle.Visible = false
FOVCircle.Radius = FOV
FOVCircle.Thickness = 1
FOVCircle.Color = Color3.new(1, 0, 0) -- Red FOV circle
FOVCircle.Transparency = 1
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

-- Function to Get the Closest Enemy
local function getClosestEnemy()
    local closestEnemy = nil
    local shortestDistance = FOV

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Team ~= LocalPlayer.Team then
            local character = player.Character
            local head = character and character:FindFirstChild("Head")
            local humanoid = character and character:FindFirstChild("Humanoid")

            if head and humanoid and humanoid.Health > 0 then
                local screenPosition, onScreen = Camera:WorldToViewportPoint(head.Position)
                if onScreen then
                    local mousePosition = UserInputService:GetMouseLocation()
                    local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - mousePosition).Magnitude

                    if distance < shortestDistance and distance <= FOV then
                        shortestDistance = distance
                        closestEnemy = head
                    end
                end
            end
        end
    end

    return closestEnemy
end

-- Aimbot Logic
local function aimbot()
    if AimbotEnabled then
        Target = getClosestEnemy()

        if Target then
            local targetScreenPosition = Camera:WorldToViewportPoint(Target.Position)
            local mousePosition = UserInputService:GetMouseLocation()
            local aimPosition = mousePosition:Lerp(Vector2.new(targetScreenPosition.X, targetScreenPosition.Y), AimSmoothness)

            mousemoverel(aimPosition.X - mousePosition.X, aimPosition.Y - mousePosition.Y)
        end
    end
end

-- Update FOV Circle Position
RunService.RenderStepped:Connect(function()
    FOVCircle.Position = UserInputService:GetMouseLocation()
end)

-- Bind Aimbot to RenderStepped
RunService.RenderStepped:Connect(aimbot)


local AimbotTab = Window:CreateTab("Aimbot", 4483362458) -- Create Aimbot Tab

-- Enable Aimbot Toggle
AimbotTab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Flag = "Toggle1", -- Unique flag
    Callback = function(Value)
        AimbotEnabled = Value
        FOVCircle.Visible = Value -- Show/Hide FOV Circle
    end
})

-- Smoothness Slider
AimbotTab:CreateSlider({
    Name = "Smoothness",
    Range = {0.05, 1},
    Increment = 0.01,
    Suffix = "",
    CurrentValue = AimSmoothness,
    Flag = "Slider1", -- Unique flag
    Callback = function(Value)
        AimSmoothness = Value
    end
})

-- FOV Slider
AimbotTab:CreateSlider({
    Name = "Field of View",
    Range = {100, 1000},
    Increment = 10,
    Suffix = " px",
    CurrentValue = FOV,
    Flag = "Slider2", -- Unique flag
    Callback = function(Value)
        FOV = Value
        FOVCircle.Radius = Value
    end
})

-- FOV Circle Color Picker
AimbotTab:CreateColorPicker({
    Name = "FOV Circle Color",
    CurrentValue = FOVCircle.Color,
    Flag = "ColorPicker1", -- Unique flag
    Callback = function(Value)
        FOVCircle.Color = Value
    end
})
