local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Create the Loading GUI (full-screen, transparent)
local loadingGui = Instance.new("ScreenGui")
loadingGui.Name = "CometLoadingGui"
loadingGui.Parent = game.CoreGui
loadingGui.IgnoreGuiInset = true

-- Invisible container solely for positioning
local container = Instance.new("Frame")
container.Name = "Container"
container.Parent = loadingGui
container.AnchorPoint = Vector2.new(0.5, 0.5)
container.Position = UDim2.new(0.5, 0, 0.5, 0)
container.Size = UDim2.new(0, 0, 0, 0)
container.BackgroundTransparency = 1
container.BorderSizePixel = 0

-- MAIN TITLE (Comet)
local cometLabel = Instance.new("TextLabel")
cometLabel.Name = "CometLabel"
cometLabel.Parent = container
cometLabel.Size = UDim2.new(1, 0, 0, 180)
cometLabel.Position = UDim2.new(0, 0, 0, 0)
cometLabel.BackgroundTransparency = 1
cometLabel.Text = "Comet"
cometLabel.Font = Enum.Font.ArimoBold
cometLabel.TextSize = 160
cometLabel.TextColor3 = Color3.fromRGB(240,240,240)
cometLabel.TextStrokeColor3 = Color3.new(255, 252, 252)
cometLabel.TextStrokeTransparency = 0.2  -- initial stroke transparency
cometLabel.TextTransparency = 1  -- start invisible
cometLabel.ZIndex = 2

local cometTextGradient = Instance.new("UIGradient", cometLabel)
cometTextGradient.Rotation = 0
cometTextGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 252, 252)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0,150,255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 252, 252))
})
cometTextGradient.Offset = Vector2.new(-1, 0)

-- EXECUTOR LABEL (directly below "Comet")
local executorName = identifyexecutor() or "Unknown Executor"
local executorLabel = Instance.new("TextLabel")
executorLabel.Name = "ExecutorLabel"
executorLabel.Parent = container
executorLabel.Size = UDim2.new(1, 0, 0, 60)
executorLabel.Position = UDim2.new(0, 0, 0, 190)  -- immediately below the main title
executorLabel.BackgroundTransparency = 1
executorLabel.Text = executorName
executorLabel.Font = Enum.Font.ArimoBold
executorLabel.TextSize = 36
executorLabel.TextColor3 = Color3.fromRGB(230,230,230)
executorLabel.TextStrokeColor3 = Color3.new(255, 252, 252)
executorLabel.TextStrokeTransparency = 0.2  -- initial stroke transparency
executorLabel.TextTransparency = 1  -- start invisible
executorLabel.ZIndex = 2

local executorGradient = Instance.new("UIGradient", executorLabel)
executorGradient.Rotation = 0
executorGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 252, 252)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0,200,255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 252, 252))
})
executorGradient.Offset = Vector2.new(-1, 0)

-- POP-IN ANIMATION: Expand container with an elastic ease
local popInTween = TweenService:Create(container, TweenInfo.new(1.5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {Size = UDim2.new(0,600,0,300)})
popInTween:Play()
popInTween.Completed:Connect(function()
    -- Fade in the text very smoothly over 2 seconds
    local fadeInComet = TweenService:Create(cometLabel, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {TextTransparency = 0})
    local fadeInExecutor = TweenService:Create(executorLabel, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {TextTransparency = 0})
    fadeInComet:Play()
    fadeInExecutor:Play()
end)

-- CONTINUOUS SMOOTH ANIMATIONS: Pulsation, gradient shimmer, animated stroke, and gentle bobbing
local startTime = tick()
local renderConn = RunService.RenderStepped:Connect(function()
    local t = tick() - startTime

    -- Animate the comet label's gradient offset and text size for a dynamic shimmer
    local cometOff = math.sin(t * 2) * 1.5
    cometTextGradient.Offset = Vector2.new(cometOff, 0)
    cometLabel.TextSize = 160 + 8 * math.sin(t * 2.2)

    -- Animate the stroke transparency to create a pulsing stroke effect
    local strokePulse = 0.2 + 0.1 * math.sin(t * 3)  -- oscillates between 0.1 and 0.3
    cometLabel.TextStrokeTransparency = strokePulse

    -- Executor label: animate gradient offset and vertical bobbing
    local execOff = math.cos(t * 2.5) * 1.5
    executorGradient.Offset = Vector2.new(execOff, 0)
    local bob = math.sin(t * 2) * 6
    executorLabel.Position = UDim2.new(0, 0, 0, 130 + bob)
    executorLabel.TextStrokeTransparency = strokePulse  -- sync stroke animation with cometLabel

    -- Subtle container rotation for fluid motion
    container.Rotation = math.sin(t * 0.3) * 1.5
end)

-- Let the animation run for a few seconds
wait(4)

-- FADE-OUT ANIMATION: Smoothly fade out text and then shrink the container
local fadeOutTweenComet = TweenService:Create(cometLabel, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {TextTransparency = 1, TextStrokeTransparency = 1})
local fadeOutTweenExecutor = TweenService:Create(executorLabel, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {TextTransparency = 1, TextStrokeTransparency = 1})
fadeOutTweenComet:Play()
fadeOutTweenExecutor:Play()
fadeOutTweenExecutor.Completed:Connect(function()
    renderConn:Disconnect()
    local shrinkTween = TweenService:Create(container, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {Size = UDim2.new(0,0,0,0), Rotation = 0})
    shrinkTween:Play()
    shrinkTween.Completed:Connect(function()
        loadingGui:Destroy()
    end)
end)



---------------------------
-- SERVICES & UTILITY FUNCTIONS
---------------------------
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Modified tween function now supports an optional callback
local function tween(object, properties, duration, easingStyle, easingDirection, delay, callback)
    local info = TweenInfo.new(
        duration or 0.2,
        easingStyle or Enum.EasingStyle.Sine,
        easingDirection or Enum.EasingDirection.Out,
        0,
        false,
        delay or 0
    )
    local tw = TweenService:Create(object, info, properties)
    if callback then
        tw.Completed:Connect(callback)
    end
    tw:Play()
    return tw
end

---------------------------
-- UI ELEMENT FUNCTIONS
---------------------------


local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

--------------------------------------------------
-- Helper Tween Function
--------------------------------------------------
local function tween(object, properties, duration, easingStyle, easingDirection, delay, callback)
	local tweenInfo = TweenInfo.new(
		duration or 0.25,
		easingStyle or Enum.EasingStyle.Quad,
		easingDirection or Enum.EasingDirection.Out,
		0,
		false,
		delay or 0
	)
	local t = TweenService:Create(object, tweenInfo, properties)
	if callback then
		t.Completed:Connect(callback)
	end
	t:Play()
	return t
end

--------------------------------------------------
-- createSlider Function (Polished Version)
--------------------------------------------------
local function createSlider(parent, opts, callback)
	opts = opts or {}
	local min = opts.Min or 0
	local max = opts.Max or 100
	local defaultValue = opts.Default or 50
	local sliderLabel = opts.Label or "Slider"
	local initPercent = (defaultValue - min) / (max - min)
	local sliderHeight = opts.Organization and 80 or 100

	local function tween(object, properties, duration, easingStyle, easingDirection, delay, callback)
		local ti = TweenInfo.new(duration, easingStyle or Enum.EasingStyle.Sine, easingDirection or Enum.EasingDirection.Out, 0, false, delay or 0)
		local t = game:GetService("TweenService"):Create(object, ti, properties)
		t:Play()
		if callback then
			t.Completed:Connect(callback)
		end
		return t
	end

	-- Outer Container
	local slider = Instance.new("Frame")
	slider.Name = "Slider"
	slider.Size = opts.Size or UDim2.new(0, 320, 0, sliderHeight)
	slider.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	slider.BackgroundTransparency = 0
	slider.ClipsDescendants = true
	slider.ZIndex = 10
	slider.Parent = parent

	-- Container Border & Rounded Corners
-- Assume "slider" is an existing Frame representing your slider container.
-- For demonstration, we assume slider is already parented to an appropriate parent.
-- (Make sure to adjust "parent" or the initial properties if necessary.)

-- Assume "slider" is your slider container (a Frame) already created and parented appropriately.
-- Also assume you have a helper function "tween" defined (or replace with TweenService:Create calls directly).
local TweenService = game:GetService("TweenService")

-----------------------------------------------------------
-- SLIDER CONTAINER STYLING
-----------------------------------------------------------
-- Create and configure the UIStroke on the slider.
local containerStroke = Instance.new("UIStroke", slider)
containerStroke.Thickness = 2
containerStroke.Color = Color3.fromRGB(100, 100, 100)  -- initial color
containerStroke.Transparency = 0.2

-- Animate the stroke to pulse like your accentLine.
local strokeColorTween = TweenService:Create(
	containerStroke,
	TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
	{ Color = Color3.fromRGB(0, 200, 255) }
)
strokeColorTween:Play()

local strokeTransparencyTween = TweenService:Create(
	containerStroke,
	TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
	{ Transparency = 0.15 }
)
strokeTransparencyTween:Play()

-- Add rounded corners.
local containerCorner = Instance.new("UICorner", slider)
containerCorner.CornerRadius = UDim.new(0, 10)

-- Add a gradient background for extra depth.
local sliderGradient = Instance.new("UIGradient", slider)
sliderGradient.Rotation = 90
sliderGradient.Color = ColorSequence.new({
	ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 30)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 20))
})

-----------------------------------------------------------
-- HOVER & INTERACTION EFFECTS
-----------------------------------------------------------
-- Create a UIScale object to animate a subtle zoom on hover.
local scaleObj = Instance.new("UIScale", slider)
scaleObj.Scale = 1

slider.MouseEnter:Connect(function()
	-- Tween scale up.
	tween(scaleObj, { Scale = 1.02 }, 0.2)
	-- Optionally, tween the gradient to a slightly brighter tone.
	tween(sliderGradient, { Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30))
	})}, 0.2)
end)

slider.MouseLeave:Connect(function()
	-- Tween scale back to normal.
	tween(scaleObj, { Scale = 1 }, 0.2)
	-- Revert gradient colors.
	tween(sliderGradient, { Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 30)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 20))
	})}, 0.2)
end)

-----------------------------------------------------------
-- CONTENT CONTAINER SETUP
-----------------------------------------------------------
local content = Instance.new("Frame")
content.Name = "Content"
content.Size = UDim2.new(1, 0, 0, 20)  -- Only occupies the top portion (20 pixels high)
content.Position = UDim2.new(0, 0, 0, 0)
content.BackgroundTransparency = 1
content.ZIndex = slider.ZIndex + 4
content.Parent = slider



	local padding = Instance.new("UIPadding", content)
	if opts.Organization then
		padding.PaddingLeft = UDim.new(0, 6)
		padding.PaddingRight = UDim.new(0, 6)
		padding.PaddingTop = UDim.new(0, 4)
		padding.PaddingBottom = UDim.new(0, 4)
	else
		padding.PaddingLeft = UDim.new(0, 10)
		padding.PaddingRight = UDim.new(0, 10)
		padding.PaddingTop = UDim.new(0, 10)
		padding.PaddingBottom = UDim.new(0, 10)
	end

	local layout = Instance.new("UIListLayout", content)
	layout.FillDirection = Enum.FillDirection.Vertical
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 4)

	if opts.Organization and opts.OrgLabel then
		local orgLabel = Instance.new("TextLabel")
		orgLabel.Name = "OrganizationLabel"
		orgLabel.Size = UDim2.new(1, 0, 0, 20)
		orgLabel.BackgroundTransparency = 1
		orgLabel.Text = opts.OrgLabel
		orgLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
		orgLabel.Font = Enum.Font.GothamBold
		orgLabel.TextSize = 18
		orgLabel.TextXAlignment = Enum.TextXAlignment.Left
		orgLabel.ZIndex = content.ZIndex
		orgLabel.Parent = content
	end

	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "TitleLabel"
	titleLabel.Size = UDim2.new(1, 0, 0, 35)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = sliderLabel
	titleLabel.Font = Enum.Font.GothamBold
	titleLabel.TextSize = 26
	titleLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.TextStrokeTransparency = 0.8
	titleLabel.ZIndex = content.ZIndex
	titleLabel.Parent = content

local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local valueLabel = Instance.new("TextLabel")
valueLabel.Name = "ValueLabel"
valueLabel.Size = UDim2.new(1, 0, 0, 25)
valueLabel.BackgroundTransparency = 1
valueLabel.Text = tostring(defaultValue)
valueLabel.Font = Enum.Font.GothamSemibold
valueLabel.TextSize = 22
valueLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
valueLabel.TextXAlignment = Enum.TextXAlignment.Left
valueLabel.TextStrokeTransparency = 0.8
valueLabel.ZIndex = content.ZIndex
valueLabel.Parent = content

-- Add a gradient to give the text a dynamic, shimmering effect.
local valueGradient = Instance.new("UIGradient", valueLabel)
valueGradient.Rotation = 0
valueGradient.Color = ColorSequence.new({
	ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 150, 255)),
	ColorSequenceKeypoint.new(0.5, Color3.fromRGB(240, 240, 240)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 150, 255))
})
-- Start the gradient offset off to the left.
valueGradient.Offset = Vector2.new(-0.3, 0)

-- Continuously animate the gradient's offset for a smooth shimmer.
coroutine.wrap(function()
	while valueLabel and valueLabel.Parent do
		local tweenForward = TweenService:Create(valueGradient, TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Offset = Vector2.new(0.3, 0)})
		tweenForward:Play()
		tweenForward.Completed:Wait()
		local tweenBackward = TweenService:Create(valueGradient, TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Offset = Vector2.new(-0.3, 0)})
		tweenBackward:Play()
		tweenBackward.Completed:Wait()
	end
end)()

-- Add a UIScale for a pulsing effect when the value updates.
local valueScale = Instance.new("UIScale", valueLabel)
valueScale.Scale = 1

-- Function to update the valueLabel with a cool pulse and number-switch animation.
-- Call updateValueLabel(newValue) whenever you need to update the slider's value.
local function updateValueLabel(newValue)
	-- Pulse up
	local pulseUp = TweenService:Create(valueScale, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Scale = 1.3})
	-- Pulse down
	local pulseDown = TweenService:Create(valueScale, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {Scale = 1})
	
	pulseUp:Play()
	pulseUp.Completed:Wait()
	-- Update the displayed value
	valueLabel.Text = tostring(newValue)
	pulseDown:Play()
end

-- Example usage (replace with your actual update logic):
-- updateValueLabel(75)


	-- Track (Slider Bar)
	local track = Instance.new("Frame")
	track.Name = "Track"
	track.Size = UDim2.new(1, -20, 0, 12)
	track.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
	track.BorderSizePixel = 0
	track.ZIndex = content.ZIndex
	track.Parent = content

	local trackCorner = Instance.new("UICorner", track)
	trackCorner.CornerRadius = UDim.new(0, 6)

	local trackGradient = Instance.new("UIGradient", track)
	trackGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(80, 80, 80)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(60, 60, 60))
	})
	trackGradient.Rotation = 90

	-- Fill inside the Track
	local fill = Instance.new("Frame")
	fill.Name = "Fill"
	fill.Size = UDim2.new(initPercent, 0, 1, 0)
	fill.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
	fill.BorderSizePixel = 0
	fill.ZIndex = track.ZIndex + 1
	fill.Parent = track

	local fillCorner = Instance.new("UICorner", fill)
	fillCorner.CornerRadius = UDim.new(0, 6)

	local fillGradient = Instance.new("UIGradient", fill)
	fillGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 180, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 120, 255))
	})
	fillGradient.Rotation = 90

	-- Draggable Handle
	local handle = Instance.new("TextButton")
	handle.Name = "Handle"
	handle.Size = UDim2.new(0, 20, 0, 20)
	handle.AnchorPoint = Vector2.new(0.5, 0.5)
	handle.Position = UDim2.new(initPercent, 0, 0.5, 0)
	handle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	handle.BorderSizePixel = 0
	handle.AutoButtonColor = false
	handle.Text = ""
	handle.ZIndex = track.ZIndex + 2
	handle.Parent = track

	local handleCorner = Instance.new("UICorner", handle)
	handleCorner.CornerRadius = UDim.new(1, 0)

	local handleStroke = Instance.new("UIStroke", handle)
	handleStroke.Color = Color3.fromRGB(0, 150, 255)
	handleStroke.Thickness = 2
	handleStroke.Transparency = 0.5

	-- Tooltip (appears above the handle when dragging)
	local tooltip = Instance.new("TextLabel")
	tooltip.Name = "Tooltip"
	tooltip.Size = UDim2.new(0, 50, 0, 20)
	tooltip.Position = UDim2.new(0, 0, 0, -25)
	tooltip.BackgroundTransparency = 1
	tooltip.TextColor3 = Color3.fromRGB(255, 255, 255)
	tooltip.Font = Enum.Font.GothamBold
	tooltip.TextSize = 18
	tooltip.Text = tostring(defaultValue)
	tooltip.Visible = false
	tooltip.ZIndex = handle.ZIndex + 1
	tooltip.Parent = track

-- At the top of your module or script, declare renderConn in a persistent scope:
local renderConn

-- Before creating a new connection, disconnect any existing one.
if renderConn and renderConn.Connected then
    renderConn:Disconnect()
    renderConn = nil
end

local RunService = game:GetService("RunService")

-- Assume these variables are defined:
-- initPercent, slider, fill, handle, tooltip

local targetPercent = initPercent
local currentPercent = initPercent

renderConn = RunService.RenderStepped:Connect(function()
    -- Check if 'slider' exists and has a parent.
    if slider and slider.Parent then
        currentPercent = currentPercent + (targetPercent - currentPercent) * 0.6
        fill.Size = UDim2.new(currentPercent, 0, 1, 0)
        handle.Position = UDim2.new(currentPercent, 0, 0.5, 0)
        if tooltip and tooltip.Visible then
            tooltip.Position = UDim2.new(currentPercent, 0, 0, -25)
        end
    else
        -- If slider is missing, disconnect the RenderStepped connection safely.
        if renderConn then
            renderConn:Disconnect()
            renderConn = nil
        end
    end
end)


	-- Dragging logic and updating value
	local dragging = false
	local function updateValueFromInput(input)
		local absX = track.AbsolutePosition.X
		local width = track.AbsoluteSize.X
		local mouseX = input.Position.X
		local pos = math.clamp(mouseX - absX, 0, width)
		local percent = pos / width
		
		if opts.Snap and opts.Increment then
			local rawValue = min + (max - min) * percent
			local snappedValue = math.floor(rawValue / opts.Increment + 0.5) * opts.Increment
			percent = (snappedValue - min) / (max - min)
			valueLabel.Text = tostring(snappedValue)
			tooltip.Text = tostring(snappedValue)
			targetPercent = percent
			if callback then callback(snappedValue) end
		else
			targetPercent = percent
			local value = math.floor(min + (max - min) * percent)
			valueLabel.Text = tostring(value)
			tooltip.Text = tostring(value)
			if callback then callback(value) end
		end
	end

	handle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			tooltip.Visible = true
			tween(handle, {Size = UDim2.new(0, 26, 0, 26)}, 0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		end
	end)

	handle.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
			tooltip.Visible = false
			tween(handle, {Size = UDim2.new(0, 20, 0, 20)}, 0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		end
	end)

	track.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			updateValueFromInput(input)
			tween(handle, {Size = UDim2.new(0, 26, 0, 26)}, 0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out, 0, function()
				if not dragging then
					tween(handle, {Size = UDim2.new(0, 20, 0, 20)}, 0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
				end
			end)
		end
	end)

	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			updateValueFromInput(input)
		end
	end)

	return slider
end


local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

--------------------------------------------------
-- Helper Tween Function
--------------------------------------------------
local function tween(object, properties, duration, easingStyle, easingDirection, delay, callback)
	local tweenInfo = TweenInfo.new(
		duration or 0.25,
		easingStyle or Enum.EasingStyle.Quad,
		easingDirection or Enum.EasingDirection.Out,
		0,
		false,
		delay or 0
	)
	local t = TweenService:Create(object, tweenInfo, properties)
	if callback then
		t.Completed:Connect(callback)
	end
	t:Play()
	return t
end

--------------------------------------------------
-- createToggle Function (Repositioned for Better Layout)
--------------------------------------------------
local TweenService = game:GetService("TweenService")

local function tween(obj, props, dur, style, dir)
	local info = TweenInfo.new(dur, style, dir)
	local t = TweenService:Create(obj, info, props)
	t:Play()
	return t
end

local function createToggle(parent, opts, callback)
	opts = opts or {}
	local labelText = opts.Label or "Toggle"
	local defaultState = opts.Default or false

	local container = Instance.new("Frame")
	container.Name = "ToggleContainer"
	container.Size = opts.Size or UDim2.new(1, 0, 0, 40)
	container.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	container.BackgroundTransparency = 1
	container.ClipsDescendants = true
	container.ZIndex = 1
	container.Parent = parent

	local dropShadow = Instance.new("Frame")
	dropShadow.Name = "ContainerDropShadow"
	dropShadow.Size = container.Size
	dropShadow.Position = UDim2.new(0, 4, 0, 4)
	dropShadow.BackgroundColor3 = Color3.new(0, 0, 0)
	dropShadow.BackgroundTransparency = 0.6
	dropShadow.BorderSizePixel = 0
	dropShadow.ZIndex = container.ZIndex - 1
	dropShadow.Parent = container

	local containerGradient = Instance.new("UIGradient", container)
	containerGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(45, 45, 45)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 35))
	})
	containerGradient.Rotation = 90

	local containerCorner = Instance.new("UICorner", container)
	containerCorner.CornerRadius = UDim.new(0, 12)

	local containerStroke = Instance.new("UIStroke", container)
	containerStroke.Thickness = 2
	containerStroke.Color = Color3.fromRGB(120, 120, 120)
	containerStroke.Transparency = 0.2

	tween(container, {BackgroundTransparency = 0}, 0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)

	container.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			tween(container, {Size = (opts.Size or UDim2.new(1, 0, 0, 40)) * 1.03}, 0.15, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
			tween(dropShadow, {Size = (opts.Size or UDim2.new(1, 0, 0, 40)) * 1.03}, 0.15, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
		end
	end)
	container.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			tween(container, {Size = opts.Size or UDim2.new(1, 0, 0, 40)}, 0.15, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
			tween(dropShadow, {Size = opts.Size or UDim2.new(1, 0, 0, 40)}, 0.15, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
		end
	end)

	coroutine.wrap(function()
		while true do
			tween(containerStroke, {Transparency = 0.05}, 1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
			wait(1)
			tween(containerStroke, {Transparency = 0.2}, 1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
			wait(1)
		end
	end)()

    -- Label: occupies most of the container on the left.
-- Create the label.
local label = Instance.new("TextLabel")
label.Name = "ToggleLabel"
label.BackgroundTransparency = 1
label.Text = labelText
label.Font = opts.Font or Enum.Font.GothamBold
label.TextSize = opts.TextSize or 20
label.TextColor3 = opts.TextColor or Color3.fromRGB(240, 240, 240)
label.TextXAlignment = Enum.TextXAlignment.Left
label.Size = UDim2.new(1, -80, 1, 0)
label.Position = UDim2.new(0, 10, 0, 0)
label.TextStrokeColor3 = opts.TextStrokeColor or Color3.new(0, 0, 0)
label.TextStrokeTransparency = opts.TextStrokeTransparency or 0.8
label.Parent = container

local textGradient = Instance.new("UIGradient", label)
textGradient.Color = ColorSequence.new({
	ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 200, 200)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 240, 240))
})
textGradient.Rotation = 0
textGradient.Offset = Vector2.new(-0.5, 0)

label.TextTransparency = 1
tween(label, {TextTransparency = 0}, 1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

coroutine.wrap(function()
	while true do
		local t1 = tween(textGradient, {Offset = Vector2.new(0.5, 0)}, 3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
		t1.Completed:Wait()
		local t2 = tween(textGradient, {Offset = Vector2.new(-0.5, 0)}, 3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
		t2.Completed:Wait()
	end
end)()


-- Toggle track: fixed size on the right.
local track = Instance.new("Frame")
track.Name = "ToggleTrack"
track.Size = UDim2.new(0, 60, 0, 30)
track.Position = UDim2.new(1, -70, 0.5, -15)
track.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
track.BorderSizePixel = 0
track.Parent = container

local trackCorner = Instance.new("UICorner", track)
trackCorner.CornerRadius = UDim.new(0, 15)

local trackGradient = Instance.new("UIGradient", track)
trackGradient.Rotation = 90
trackGradient.Color = ColorSequence.new({
	ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(60, 60, 60))
})

spawn(function()
	while true do
		tween(trackGradient, {Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(35, 35, 35)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(65, 65, 65))
		})}, 2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
		wait(2)
		tween(trackGradient, {Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(60, 60, 60))
		})}, 2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
		wait(2)
	end
end)

local borderStroke = Instance.new("UIStroke", track)
borderStroke.Color = Color3.fromRGB(100, 100, 100)
borderStroke.Thickness = 2
borderStroke.Transparency = 0.5

local trackScale = Instance.new("UIScale", track)
trackScale.Scale = 1

spawn(function()
	while true do
		tween(trackScale, {Scale = 1.05}, 1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
		tween(trackScale, {Scale = 1}, 1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
		wait(1.5)
	end
end)



-- Improved Glow & Handle Design

local TweenService = game:GetService("TweenService")

local glow = Instance.new("Frame")
glow.Name = "ToggleGlow"
glow.Size = UDim2.new(1, 20, 1, 20)
glow.Position = UDim2.new(0, -10, 0, -10)
glow.BackgroundTransparency = 1
glow.ZIndex = track.ZIndex - 1
glow.Parent = track

local glowImage = Instance.new("ImageLabel")
glowImage.Name = "GlowImage"
glowImage.Size = UDim2.new(1, 0, 1, 0)
glowImage.Position = UDim2.new(0, 0, 0, 0)
glowImage.BackgroundTransparency = 1
glowImage.Image = "rbxassetid://123456789"
glowImage.ImageColor3 = Color3.fromRGB(0, 180, 255)
glowImage.ScaleType = Enum.ScaleType.Fit
glowImage.ZIndex = glow.ZIndex
glowImage.Parent = glow

local glowCorner = Instance.new("UICorner", glowImage)
glowCorner.CornerRadius = UDim.new(0, 20)

local glowScale = Instance.new("UIScale", glow)
glowScale.Scale = 1

spawn(function()
	while true do
		local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
		local tweenTransparencyIn = TweenService:Create(glowImage, tweenInfo, {ImageTransparency = 0.2})
		local tweenScaleUp = TweenService:Create(glowScale, tweenInfo, {Scale = 1.1})
		tweenTransparencyIn:Play()
		tweenScaleUp:Play()
		tweenTransparencyIn.Completed:Wait()
		local tweenTransparencyOut = TweenService:Create(glowImage, tweenInfo, {ImageTransparency = 0.6})
		local tweenScaleDown = TweenService:Create(glowScale, tweenInfo, {Scale = 1})
		tweenTransparencyOut:Play()
		tweenScaleDown:Play()
		tweenTransparencyOut.Completed:Wait()
	end
end)


-- Toggle handle (the sliding indicator)
local handle = Instance.new("Frame")
handle.Name = "ToggleHandle"
handle.Size = UDim2.new(0, 26, 0, 26)
handle.BackgroundColor3 = defaultState and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(200, 200, 200)
handle.BorderSizePixel = 0
handle.Parent = track

local handleCorner = Instance.new("UICorner", handle)
handleCorner.CornerRadius = UDim.new(1, 0)

-- Add a subtle gradient to the handle for a premium feel.
local handleGradient = Instance.new("UIGradient", handle)
handleGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(240,240,240))
})
handleGradient.Rotation = 90

-- Improved handle shadow using an ImageLabel with a softer, larger shadow.
local handleShadow = Instance.new("ImageLabel")
handleShadow.Name = "HandleShadow"
-- Make the shadow slightly larger than the handle.
handleShadow.Size = UDim2.new(0, 30, 0, 30)
handleShadow.Position = UDim2.new(0, 3, 0, 3)
handleShadow.BackgroundTransparency = 1
-- Use a soft shadow asset (replace asset ID as needed)
handleShadow.Image = "rbxassetid://131604521"
handleShadow.ImageColor3 = Color3.new(0, 0, 0)
handleShadow.ImageTransparency = 0.4
handleShadow.ScaleType = Enum.ScaleType.Slice
handleShadow.SliceCenter = Rect.new(10, 10, 90, 90)
handleShadow.Parent = handle
handleShadow.ZIndex = handle.ZIndex - 1


    -- Define positions for off and on states.
    local offPosition = UDim2.new(0, 2, 0.5, -13)
    local onPosition  = UDim2.new(1, -28, 0.5, -13)
    handle.Position = defaultState and onPosition or offPosition

    -- Current state of the toggle.
    local state = defaultState

    --------------------------------------------------
    -- Function to update the toggle state.
    --------------------------------------------------
local function updateToggle(newState)
    state = newState
    if state then
        tween(handle, {Position = onPosition}, 0.7, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        tween(track, {BackgroundColor3 = Color3.fromRGB(0, 200, 255)}, 0.7, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
        tween(handle, {BackgroundColor3 = Color3.fromRGB(255, 255, 255)}, 0.7, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
        tween(glow, {BackgroundTransparency = 0.2}, 0.7, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
        tween(borderStroke, {Color = Color3.fromRGB(0, 200, 255), Thickness = 4, Transparency = 0}, 0.7, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
        if glowBlur then
            tween(glowBlur, {ImageTransparency = 0.2, Size = UDim2.new(1, 10, 1, 10)}, 0.7, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
        end
    else
        tween(handle, {Position = offPosition}, 0.35, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        tween(track, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}, 0.35, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
        tween(handle, {BackgroundColor3 = Color3.fromRGB(200, 200, 200)}, 0.35, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
        tween(glow, {BackgroundTransparency = 1}, 0.35, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
        tween(borderStroke, {Color = Color3.fromRGB(100, 100, 100), Thickness = 2, Transparency = 0.5}, 0.35, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
    end
    if callback then
        callback(state)
    end
end

track.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        updateToggle(not state)
    end
end)

track.MouseEnter:Connect(function()
    tween(trackScale, {Scale = 1.05}, 0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
    if state then
        tween(borderStroke, {Thickness = 4.75, Transparency = 0}, 0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
    else
        tween(borderStroke, {Thickness = 2.75, Transparency = 0.4}, 0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
    end
end)

track.MouseLeave:Connect(function()
    tween(trackScale, {Scale = 1}, 0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
    if state then
        tween(borderStroke, {Thickness = 4, Transparency = 0}, 0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
    else
        tween(borderStroke, {Thickness = 2, Transparency = 0.5}, 0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
    end
end)

return container
end

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Utility tween function for smooth transitions
local function tween(object, properties, duration, easingStyle, easingDirection, delay, callback)
	local tweenInfo = TweenInfo.new(
		duration or 0.15,
		easingStyle or Enum.EasingStyle.Sine,
		easingDirection or Enum.EasingDirection.Out,
		0,
		false,
		delay or 0
	)
	local t = TweenService:Create(object, tweenInfo, properties)
	if callback then
		t.Completed:Connect(callback)
	end
	t:Play()
	return t
end

-- Create a button with a smooth, professional click animation.
local function createButton(parent, opts, callback)
	opts = opts or {}

	-- Main Button Setup
	local button = Instance.new("TextButton")
	button.Name = opts.Name or "CoolButton"
	button.Size = opts.Size or UDim2.new(0, 150, 0, 50)
	button.Position = opts.Position or UDim2.new(0, 0, 0, 0)
	button.BackgroundColor3 = opts.BackgroundColor or Color3.fromRGB(0, 150, 255)
	button.Text = opts.Text or "Button"
	button.Font = opts.Font or Enum.Font.GothamBold
	button.TextSize = opts.TextSize or 18
	button.TextColor3 = opts.TextColor or Color3.fromRGB(240, 240, 240)
	button.AutoButtonColor = false
	button.Parent = parent

	-- Optional drop shadow for extra depth
	if opts.DropShadow then
		local shadow = Instance.new("Frame")
		shadow.Name = "DropShadow"
		shadow.Size = button.Size
		shadow.Position = UDim2.new(0, opts.ShadowOffsetX or 3, 0, opts.ShadowOffsetY or 3)
		shadow.BackgroundColor3 = opts.ShadowColor or Color3.new(0, 0, 0)
		shadow.BackgroundTransparency = opts.ShadowTransparency or 0.5
		shadow.ZIndex = button.ZIndex - 1
		shadow.Parent = button

		local shadowCorner = Instance.new("UICorner")
		shadowCorner.CornerRadius = opts.CornerRadius or UDim.new(0, 12)
		shadowCorner.Parent = shadow
	end

	-- Rounded corners for a modern look
	local corner = Instance.new("UICorner")
	corner.CornerRadius = opts.CornerRadius or UDim.new(0, 12)
	corner.Parent = button

	-- Subtle outline (stroke)
	local stroke = Instance.new("UIStroke")
	stroke.Thickness = opts.StrokeThickness or 2
	stroke.Color = opts.StrokeColor or Color3.fromRGB(0, 120, 200)
	stroke.Transparency = opts.StrokeTransparency or 0.4
	stroke.Parent = button

	-- Dynamic gradient background
	local gradient = Instance.new("UIGradient")
	gradient.Color = opts.GradientColor or ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 170, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 130, 255))
	})
	gradient.Rotation = opts.GradientRotation or 90
	gradient.Parent = button

	-- UIScale to allow subtle scale animations
	local scale = Instance.new("UIScale")
	scale.Scale = 1
	scale.Parent = button

	--------------------------------------
	-- Hover Effects (color, stroke & gradient)
	--------------------------------------
local originalSize = button.Size
local originalPosition = button.Position
local hoverScale = 1.05

button.MouseEnter:Connect(function()
	-- Smoothly change the background color, stroke transparency, and gradient rotation
	tween(button, { BackgroundColor3 = opts.HoverColor or Color3.fromRGB(0, 180, 255) }, 0.2)
	tween(stroke, { Transparency = opts.StrokeHoverTransparency or 0.2 }, 0.2)
	tween(gradient, { Rotation = opts.GradientHoverRotation or 0 }, 0.2)
	
	-- Calculate the new size and position for a subtle scale-up effect
	local newSize = UDim2.new(0, originalSize.X.Offset * hoverScale, 0, originalSize.Y.Offset * hoverScale)
	local deltaX = (newSize.X.Offset - originalSize.X.Offset) / 2
	local deltaY = (newSize.Y.Offset - originalSize.Y.Offset) / 2
	local newPosition = UDim2.new(
		originalPosition.X.Scale, originalPosition.X.Offset - deltaX,
		originalPosition.Y.Scale, originalPosition.Y.Offset - deltaY
	)
	
	-- Tween the button to its new size and position
	tween(button, { Size = newSize, Position = newPosition }, 0.2)
end)

button.MouseLeave:Connect(function()
	-- Revert the background color, stroke transparency, and gradient rotation
	tween(button, { BackgroundColor3 = opts.BackgroundColor or Color3.fromRGB(0, 150, 255) }, 0.2)
	tween(stroke, { Transparency = opts.StrokeTransparency or 0.4 }, 0.2)
	tween(gradient, { Rotation = opts.GradientRotation or 90 }, 0.2)
	
	-- Tween the button back to its original size and position
	tween(button, { Size = originalSize, Position = originalPosition }, 0.2)
end)


	--------------------------------------
	-- Refined Click Animation (No Ripple)
	--------------------------------------
	-- On press, slightly scale down and darken the button.
	button.MouseButton1Down:Connect(function()
		tween(scale, { Scale = opts.PressScale or 0.98 }, 0.08, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		-- Slight darkening on press; change color to a subtle darker hue.
		local clickColor = opts.ClickColor or Color3.fromRGB(0, 140, 240)
		tween(button, { BackgroundColor3 = clickColor }, 0.08)
	end)

	-- On release, scale back to full size and revert background color.
	button.MouseButton1Up:Connect(function()
		tween(scale, { Scale = 1 }, 0.12, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		tween(button, { BackgroundColor3 = opts.BackgroundColor or Color3.fromRGB(0, 150, 255) }, 0.12)
		if callback then
			callback()
		end
	end)

	return button
end


-- Base UI Window & Tab System with Sections
---------------------------
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")

-- Define adjustable color/gradient settings:
local UISettings = {
    MainColor = Color3.fromRGB(0, 0, 0),  -- mainFrame background
    StrokeColor = Color3.fromRGB(0, 150, 255),  -- mainStroke color
    OverlayGradientColors = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(10, 10, 10)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
    },
    TitleBarColor = Color3.fromRGB(20, 20, 20),  -- titleBar background
    TitleGradientColors = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 20)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 10))
    },
    AccentColor = Color3.fromRGB(0, 150, 255),  -- accentLine background
    AccentTweenColor = Color3.fromRGB(0, 200, 255),  -- accent tween target
    TitleTextColor = Color3.fromRGB(240, 240, 240)  -- titleText text color
}

if game.CoreGui:FindFirstChild("CometUI") then
	game.CoreGui:FindFirstChild("CometUI"):Destroy()
end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CometUI"
screenGui.Parent = game.CoreGui
screenGui.IgnoreGuiInset = true

local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
-- (Assume screenGui is already defined.)

---------------------------------------------------------------------
-- MAIN FRAME SETUP
---------------------------------------------------------------------
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Parent = screenGui
mainFrame.Size = UDim2.new(0, 500, 0, 500)
mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = UISettings.MainColor
mainFrame.BackgroundTransparency = 0
mainFrame.ClipsDescendants = true

-- Rounded corners
local mainCorner = Instance.new("UICorner", mainFrame)
mainCorner.CornerRadius = UDim.new(0, 16)

-- Use theme settings for stroke colors if available
local strokeColor = _G.UISettings and _G.UISettings.StrokeColor or Color3.fromRGB(0, 150, 255)
local strokeAltColor = _G.UISettings and _G.UISettings.StrokeAltColor or Color3.fromRGB(0, 100, 180)

local mainStroke = Instance.new("UIStroke", mainFrame)
mainStroke.Thickness = 3
mainStroke.Color = strokeColor
mainStroke.Transparency = 0.1

---------------------------------------------------------------------
-- STROKE PULSE ANIMATION
---------------------------------------------------------------------
coroutine.wrap(function()
    while mainFrame and mainFrame.Parent do
        local tweenStroke1 = TweenService:Create(mainStroke, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Color = strokeColor})
        tweenStroke1:Play()
        tweenStroke1.Completed:Wait()
        local tweenStroke2 = TweenService:Create(mainStroke, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Color = strokeAltColor})
        tweenStroke2:Play()
        tweenStroke2.Completed:Wait()
    end
end)()


---------------------------------------------------------------------
-- OVERLAY (STATIC) GRADIENT
---------------------------------------------------------------------
local overlayGradient = Instance.new("UIGradient")
overlayGradient.Name = "OverlayGradient"
overlayGradient.Rotation = 90
overlayGradient.Color = UISettings.OverlayGradientColors
overlayGradient.Parent = mainFrame

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-----------------------------------------------------------
-- TITLEBAR SETUP
-----------------------------------------------------------
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Parent = mainFrame
titleBar.Size = UDim2.new(1, 0, 0, 50)
titleBar.BackgroundColor3 = UISettings.TitleBarColor
titleBar.BorderSizePixel = 0
titleBar.Active = true
titleBar.Selectable = true

-----------------------------------------------------------
-- DRAGGABILITY
-----------------------------------------------------------
local dragging = false
local dragInput, dragStart, startPos
local targetPos = mainFrame.Position

titleBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = mainFrame.Position
		targetPos = startPos
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

titleBar.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		targetPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

RunService.RenderStepped:Connect(function()
	if dragging then
		mainFrame.Position = mainFrame.Position:Lerp(targetPos, 0.2)
	end
end)

-----------------------------------------------------------
-- TITLEBAR VISUAL EFFECTS
-----------------------------------------------------------
local titleBarCorner = Instance.new("UICorner", titleBar)
titleBarCorner.CornerRadius = UDim.new(0, 16)

local titleGradient = Instance.new("UIGradient", titleBar)
titleGradient.Rotation = 90
titleGradient.Color = UISettings.TitleGradientColors

-----------------------------------------------------------
-- ACCENT LINE EFFECT
-----------------------------------------------------------
local accentLine = Instance.new("Frame")
accentLine.Name = "AccentLine"
accentLine.Parent = titleBar
accentLine.Size = UDim2.new(1, 0, 0, 4)
accentLine.Position = UDim2.new(0, 0, 1, -4)
accentLine.BackgroundColor3 = UISettings.AccentColor
accentLine.BackgroundTransparency = 0
accentLine.BorderSizePixel = 0

local accentColorTween = TweenService:Create(accentLine, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {BackgroundColor3 = UISettings.AccentTweenColor})
accentColorTween:Play()

local accentTransparencyTween = TweenService:Create(accentLine, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {BackgroundTransparency = 0.15})
accentTransparencyTween:Play()

-----------------------------------------------------------
-- TITLE TEXT SETUP
-----------------------------------------------------------
local titleText = Instance.new("TextLabel")
titleText.Name = "TitleText"
titleText.Parent = titleBar
titleText.Size = UDim2.new(1, -120, 1, 0)
titleText.Position = UDim2.new(0, 20, 0, 0)
titleText.BackgroundTransparency = 1
titleText.Text = "CometWare"
titleText.Font = Enum.Font.GothamBold
titleText.TextSize = 28
titleText.TextStrokeTransparency = 0.7
titleText.TextXAlignment = Enum.TextXAlignment.Left
titleText.TextColor3 = UISettings.TitleTextColor

local titleShadow = Instance.new("TextLabel")
titleShadow.Name = "TitleShadow"
titleShadow.Parent = titleBar
titleShadow.Size = titleText.Size
titleShadow.Position = titleText.Position + UDim2.new(0, 2, 0, 2)
titleShadow.BackgroundTransparency = 1
titleShadow.Text = titleText.Text
titleShadow.Font = titleText.Font
titleShadow.TextSize = titleText.TextSize
titleShadow.TextStrokeTransparency = titleText.TextStrokeTransparency
titleShadow.TextXAlignment = titleText.TextXAlignment
titleShadow.TextColor3 = Color3.new(0, 0, 0)
titleShadow.ZIndex = titleText.ZIndex - 1

local textGradient = Instance.new("UIGradient", titleText)
textGradient.Rotation = 0
textGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 150, 255)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 240, 240))
}
textGradient.Offset = Vector2.new(-0.2, 0)
coroutine.wrap(function()
	while true do
		local tween1 = TweenService:Create(textGradient, TweenInfo.new(4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Offset = Vector2.new(1, 0)})
		tween1:Play()
		tween1.Completed:Wait()
		local tween2 = TweenService:Create(textGradient, TweenInfo.new(4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Offset = Vector2.new(-0.2, 0)})
		tween2:Play()
		tween2.Completed:Wait()
	end
end)()

---------------------------------------------------------------------
-- Expose key UI elements (for external theme code adjustment) - optional
---------------------------------------------------------------------
_G.UIThemeElements = {
	mainFrame = mainFrame,
	mainCorner = mainCorner,
	mainStroke = mainStroke,
	overlayGradient = overlayGradient,
	titleBar = titleBar,
	titleGradient = titleGradient,
	accentLine = accentLine,
	titleText = titleText,
	titleShadow = titleShadow,
	textGradient = textGradient
}


-----------------------------------------------------------
-- TITLE TEXT SHINE EFFECT
-----------------------------------------------------------
local textGradient = Instance.new("UIGradient", titleText)
textGradient.Rotation = 0
textGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 150, 255)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 240, 240))
}
textGradient.Offset = Vector2.new(-0.2, 0)

-- Animate the gradient's offset for a flowing shine effect.
coroutine.wrap(function()
	while true do
		local tween1 = TweenService:Create(textGradient, TweenInfo.new(4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Offset = Vector2.new(1, 0)})
		tween1:Play()
		tween1.Completed:Wait()
		local tween2 = TweenService:Create(textGradient, TweenInfo.new(4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Offset = Vector2.new(-0.2, 0)})
		tween2:Play()
		tween2.Completed:Wait()
	end
end)()

-----------------------------------------------------------
-- ADDITIONAL HOVER & INTERACTION EFFECTS
-----------------------------------------------------------

--------------------------------------------------
-- Integrated UI Fade/Toggle and Existing Minimize Button Code
--------------------------------------------------

local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")

--------------------------------------------------
-- Tween Helper Function
--------------------------------------------------
local function tween(object, properties, duration, easingStyle, easingDirection, delay, callback)
	duration = duration or 0.35
	local tweenInfo = TweenInfo.new(
		duration,
		easingStyle or Enum.EasingStyle.Sine,
		easingDirection or Enum.EasingDirection.Out,
		0,
		false,
		delay or 0
	)
	local t = TweenService:Create(object, tweenInfo, properties)
	if callback then
		t.Completed:Connect(callback)
	end
	t:Play()
	return t
end

--------------------------------------------------
-- Fade Out and Hide Function
--------------------------------------------------
local function fadeOutAndHide(ui, duration)
	duration = duration or 0.35
	
	-- Set a flag on the UI that it's tweening.
	ui:SetAttribute("Tweening", true)
	
	local delayIncrement = 0.02
	local currentDelay = 0
	
	-- Animate all descendant GuiObjects in a cascading fade-out.
	for _, descendant in ipairs(ui:GetDescendants()) do
		if descendant:IsA("GuiObject") then
			if descendant.BackgroundTransparency ~= nil then
				if descendant:GetAttribute("origBackgroundTransparency") == nil then
					descendant:SetAttribute("origBackgroundTransparency", descendant.BackgroundTransparency)
				end
				tween(descendant, {BackgroundTransparency = 1}, duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, currentDelay)
			end
			if descendant:IsA("TextLabel") or descendant:IsA("TextButton") or descendant:IsA("TextBox") then
				if descendant.TextTransparency ~= nil then
					if descendant:GetAttribute("origTextTransparency") == nil then
						descendant:SetAttribute("origTextTransparency", descendant.TextTransparency)
					end
					tween(descendant, {TextTransparency = 1}, duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, currentDelay)
				end
			end
			if descendant:IsA("ImageLabel") or descendant:IsA("ImageButton") then
				if descendant.ImageTransparency ~= nil then
					if descendant:GetAttribute("origImageTransparency") == nil then
						descendant:SetAttribute("origImageTransparency", descendant.ImageTransparency)
					end
					tween(descendant, {ImageTransparency = 1}, duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, currentDelay)
				end
			end
			for _, child in ipairs(descendant:GetChildren()) do
				if child:IsA("UIStroke") then
					if child:GetAttribute("origStrokeTransparency") == nil then
						child:SetAttribute("origStrokeTransparency", child.Transparency)
					end
					tween(child, {Transparency = 1}, duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, currentDelay)
				end
			end
			currentDelay = currentDelay + delayIncrement
		end
	end
	
	-- Once tweening is complete, hide the UI and clear the Tweening flag.
	delay(duration + currentDelay, function()
		ui.Visible = false
		ui:SetAttribute("Tweening", false)
	end)
end

--------------------------------------------------
-- Fade In and Show Function
--------------------------------------------------
local function fadeInAndShow(ui, duration, options)
	duration = duration or 0.35
	options = options or {}
	local cascadeDelay = options.CascadeDelay or 0.01
	local easingStyle = options.EasingStyle or Enum.EasingStyle.Sine
	local easingDirection = options.EasingDirection or Enum.EasingDirection.Out
	
	-- Set Tweening flag and ensure UI is visible.
	ui:SetAttribute("Tweening", true)
	ui.Visible = true
	
	-- Cache original transparencies and set them to 1.
	local function cacheAndInitialize(object)
		if object:IsA("GuiObject") then
			if object.BackgroundTransparency ~= nil then
				if object:GetAttribute("origBackgroundTransparency") == nil then
					object:SetAttribute("origBackgroundTransparency", object.BackgroundTransparency)
				end
				object.BackgroundTransparency = 1
			end
			if object:IsA("TextLabel") or object:IsA("TextButton") or object:IsA("TextBox") then
				if object:GetAttribute("origTextTransparency") == nil then
					object:SetAttribute("origTextTransparency", object.TextTransparency)
				end
				object.TextTransparency = 1
			end
			if object:IsA("ImageLabel") or object:IsA("ImageButton") then
				if object:GetAttribute("origImageTransparency") == nil then
					object:SetAttribute("origImageTransparency", object.ImageTransparency)
				end
				object.ImageTransparency = 1
			end
			for _, child in ipairs(object:GetChildren()) do
				if child:IsA("UIStroke") then
					if child:GetAttribute("origStrokeTransparency") == nil then
						child:SetAttribute("origStrokeTransparency", child.Transparency)
					end
					child.Transparency = 1
				end
			end
		end
		for _, child in ipairs(object:GetChildren()) do
			cacheAndInitialize(child)
		end
	end
	
	cacheAndInitialize(ui)
	
	-- Tween all properties back to their original values.
	local function tweenIn(object, delayOffset)
		delayOffset = delayOffset or 0
		if object:IsA("GuiObject") then
			local tweenProps = {}
			if object.BackgroundTransparency ~= nil then
				tweenProps.BackgroundTransparency = object:GetAttribute("origBackgroundTransparency") or 0
			end
			if object:IsA("TextLabel") or object:IsA("TextButton") or object:IsA("TextBox") then
				tweenProps.TextTransparency = object:GetAttribute("origTextTransparency") or 0
			end
			if object:IsA("ImageLabel") or object:IsA("ImageButton") then
				tweenProps.ImageTransparency = object:GetAttribute("origImageTransparency") or 0
			end
			if next(tweenProps) then
				tween(object, tweenProps, duration, easingStyle, easingDirection, delayOffset)
			end
			for _, child in ipairs(object:GetChildren()) do
				if child:IsA("UIStroke") then
					tween(child, {Transparency = child:GetAttribute("origStrokeTransparency") or 0}, duration, easingStyle, easingDirection, delayOffset)
				end
			end
		end
		for _, child in ipairs(object:GetChildren()) do
			tweenIn(child, delayOffset + cascadeDelay)
		end
	end
	
	tweenIn(ui, 0)
	
	-- Clear the Tweening flag once all tweens are expected to be complete.
	delay(duration + cascadeDelay * #ui:GetDescendants(), function()
		ui:SetAttribute("Tweening", false)
	end)
end

--------------------------------------------------
-- UI Toggle Keybind Logic (Press "K")
--------------------------------------------------
local uiVisible = true
local debounce = false

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed or input.UserInputType ~= Enum.UserInputType.Keyboard then
		return
	end
	
	if input.KeyCode == Enum.KeyCode.K and input.UserInputState == Enum.UserInputState.Begin and not debounce then
		local cometUI = game.CoreGui:FindFirstChild("CometUI")
		if not cometUI then
			return
		end
		
		local mainFrame = cometUI:FindFirstChild("MainFrame")
		if not mainFrame then
			return
		end
		
		-- If an animation is already running, ignore this toggle.
		if mainFrame:GetAttribute("Tweening") then
			return
		end
		
		debounce = true
		
		local minimized = mainFrame:GetAttribute("Minimized")
		if minimized == nil then
			minimized = false
			mainFrame:SetAttribute("Minimized", false)
		end
		
		-- Toggle UI based on visibility and minimized state.
		if (not mainFrame.Visible) or minimized then
			mainFrame:SetAttribute("Minimized", false)
			uiVisible = true
			fadeInAndShow(mainFrame, 0.35)
		else
			uiVisible = false
			mainFrame:SetAttribute("Minimized", true)
			fadeOutAndHide(mainFrame, 0.35)
			StarterGui:SetCore("SendNotification", {
				Title = "UI Hidden",
				Text = "Press K to restore the UI.",
				Duration = 5,
			})
		end
		
		wait(0.35)
		debounce = false
	end
end)

--------------------------------------------------
-- Existing Minimize Button Code
--------------------------------------------------
-- Assumes your UI includes a "TitleBar" inside "MainFrame" of "CometUI".
local cometUI = game.CoreGui:FindFirstChild("CometUI")
if cometUI then
	local mainFrame = cometUI:FindFirstChild("MainFrame")
	if mainFrame then
		local titleBar = mainFrame:FindFirstChild("TitleBar")
		if titleBar and not titleBar:FindFirstChild("MinimizeButton") then
			local minimizeButton = Instance.new("TextButton")
			minimizeButton.Name = "MinimizeButton"
			minimizeButton.Parent = titleBar
			minimizeButton.Size = UDim2.new(0, 30, 0, 30)
			minimizeButton.Position = UDim2.new(1, -85, 0, 10)
			minimizeButton.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
			minimizeButton.Text = "–"
			minimizeButton.Font = Enum.Font.GothamSemibold
			minimizeButton.TextSize = 20
			minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
			
			local minCorner = Instance.new("UICorner", minimizeButton)
			minCorner.CornerRadius = UDim.new(0, 8)
			
			local minGradient = Instance.new("UIGradient", minimizeButton)
			minGradient.Rotation = 90
			minGradient.Color = ColorSequence.new{
				ColorSequenceKeypoint.new(0, Color3.fromRGB(150, 150, 150)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(130, 130, 130))
			}
			
			local minScale = Instance.new("UIScale", minimizeButton)
			minScale.Scale = 1
			
			minimizeButton.MouseEnter:Connect(function()
				TweenService:Create(minScale, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 1.2}):Play()
				TweenService:Create(minimizeButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(240, 240, 240)}):Play()
				TweenService:Create(minGradient, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Color = ColorSequence.new{
					ColorSequenceKeypoint.new(0, Color3.fromRGB(240, 240, 240)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 220, 220))
				}}):Play()
			end)
			
			minimizeButton.MouseLeave:Connect(function()
				TweenService:Create(minScale, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 1}):Play()
				TweenService:Create(minimizeButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(150, 150, 150)}):Play()
				TweenService:Create(minGradient, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Color = ColorSequence.new{
					ColorSequenceKeypoint.new(0, Color3.fromRGB(150, 150, 150)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(130, 130, 130))
				}}):Play()
			end)
			
			minimizeButton.MouseButton1Down:Connect(function()
				TweenService:Create(minScale, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 0.9}):Play()
				local ripple = Instance.new("Frame")
				ripple.Name = "Ripple"
				ripple.Parent = minimizeButton
				ripple.Size = UDim2.new(0, 0, 0, 0)
				ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
				ripple.AnchorPoint = Vector2.new(0.5, 0.5)
				ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				ripple.BackgroundTransparency = 0.3
				local rippleCorner = Instance.new("UICorner", ripple)
				rippleCorner.CornerRadius = UDim.new(1, 0)
				TweenService:Create(ripple, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(2, 0, 2, 0), BackgroundTransparency = 1}):Play()
				task.delay(0.3, function() ripple:Destroy() end)
			end)
			
			minimizeButton.MouseButton1Up:Connect(function()
				TweenService:Create(minScale, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 1.2}):Play()
			end)
			
			minimizeButton.MouseButton1Click:Connect(function()
				-- Set minimized state and animate fade-out.
				mainFrame:SetAttribute("Minimized", true)
				fadeOutAndHide(mainFrame, 0.35)
				StarterGui:SetCore("SendNotification", {
					Title = "UI Minimized",
					Text = "Press K to restore the UI.",
					Duration = 5,
				})
			end)
		end
	end
end




local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")

-- Assume these variables are defined:
-- titleBar  : the parent frame for title bar UI elements.
-- mainFrame : your main UI container frame.
-- screenGui : the top-level ScreenGui containing your UI.

-- Create the Close Button.
local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Parent = titleBar
closeButton.Position = UDim2.new(1, -50, 0, 10)  -- shifted 20 pixels further left from the edge
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.BackgroundColor3 = Color3.fromRGB(220, 60, 60)
closeButton.Text = "X"
closeButton.Font = Enum.Font.GothamSemibold
closeButton.TextSize = 20
closeButton.TextColor3 = Color3.fromRGB(240, 240, 240)

local closeCorner = Instance.new("UICorner", closeButton)
closeCorner.CornerRadius = UDim.new(0, 5)

local closeScale = Instance.new("UIScale", closeButton)
closeScale.Scale = 1

-- MouseEnter/Leave animations.
closeButton.MouseEnter:Connect(function()
	TweenService:Create(closeScale, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 1.2}):Play()
	TweenService:Create(closeButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(240, 80, 80)}):Play()
end)

closeButton.MouseLeave:Connect(function()
	TweenService:Create(closeScale, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 1}):Play()
	TweenService:Create(closeButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(220, 60, 60)}):Play()
end)

-- Ripple effect on MouseButton1Down.
closeButton.MouseButton1Down:Connect(function()
	local ripple = Instance.new("Frame")
	ripple.Size = UDim2.new(0, 0, 0, 0)
	ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
	ripple.AnchorPoint = Vector2.new(0.5, 0.5)
	ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ripple.BackgroundTransparency = 0.3
	ripple.Parent = closeButton
	local rippleCorner = Instance.new("UICorner", ripple)
	rippleCorner.CornerRadius = UDim.new(1, 0)
	TweenService:Create(ripple, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
		Size = UDim2.new(2, 0, 2, 0), 
		BackgroundTransparency = 1
	}):Play()
	task.delay(0.3, function()
		if ripple and ripple.Parent then
			ripple:Destroy()
		end
	end)
end)

-- Prevent multiple close triggers.
local isClosing = false

closeButton.MouseButton1Click:Connect(function()
	if isClosing then return end
	isClosing = true
	
	-- Set a global flag to indicate that the UI is closed.
	_G.UIClosed = true
	
	-- Fade out animation on mainFrame (keep your beloved animation intact).
	local closeTween = TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
		BackgroundTransparency = 1,
		Size = UDim2.new(0, 0, 0, 0)
	})
	closeTween:Play()
	
	closeTween.Completed:Connect(function()
		-- Optionally, you can perform any additional cleanup here.
		-- Destroy the ScreenGui to fully kill the UI and stop any further code from running.
		if screenGui and screenGui.Parent then
			screenGui:Destroy()
		end
	end)
end)

-- Step 1: Create the Theme Button in the titleBar and define all necessary functions

local TweenService = game:GetService("TweenService")

-- Get the ScreenGui and main UI elements from CoreGui.
local screenGui = game.CoreGui:WaitForChild("CometUI") or error("CometUI not found!")
local mainFrame = screenGui:WaitForChild("MainFrame") or error("MainFrame not found!")
local titleBar = mainFrame:WaitForChild("TitleBar") or error("TitleBar not found!")
local titleText = titleBar:WaitForChild("TitleText") or error("TitleText not found in TitleBar")
local accentLine = titleBar:FindFirstChild("AccentLine")
local mainStroke = mainFrame:FindFirstChildOfClass("UIStroke")
local dynamicGradient = mainFrame:FindFirstChild("DynamicGradient")
local overlayGradient = mainFrame:FindFirstChild("OverlayGradient")

-- Declare themePanel in the outer scope so it can be referenced.
local themePanel

-----------------------------------------------
-- THEME BUTTON SETUP (in TitleBar)
-----------------------------------------------
local function toggleThemePanel()
	if themePanel then
		themePanel.Visible = not themePanel.Visible
		print("Theme panel toggled to", themePanel.Visible and "visible" or "hidden")
	else
		warn("toggleThemePanel: themePanel is not defined!")
	end
end

local themeButton = Instance.new("TextButton")
themeButton.Name = "ThemeButton"
themeButton.Parent = titleBar
themeButton.Size = UDim2.new(0, 30, 0, 30)
themeButton.Position = UDim2.new(1, -120, 0, 10)
themeButton.BackgroundColor3 = Color3.fromRGB(128, 0, 128)
themeButton.BorderSizePixel = 0
themeButton.Text = "✨"
themeButton.Font = Enum.Font.GothamBold
themeButton.TextSize = 20
themeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
themeButton.AutoButtonColor = false

local themeCorner = Instance.new("UICorner", themeButton)
themeCorner.CornerRadius = UDim.new(0, 8)
local themeScale = Instance.new("UIScale", themeButton)
themeScale.Scale = 1

themeButton.MouseEnter:Connect(function()
	TweenService:Create(themeScale, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 1.1}):Play()
	TweenService:Create(themeButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(150, 0, 150)}):Play()
end)

themeButton.MouseLeave:Connect(function()
	TweenService:Create(themeScale, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 1}):Play()
	TweenService:Create(themeButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(128, 0, 128)}):Play()
end)

themeButton.MouseButton1Down:Connect(function()
	TweenService:Create(themeScale, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 0.9}):Play()
	local ripple = Instance.new("Frame")
	ripple.Name = "Ripple"
	ripple.Parent = themeButton
	ripple.Size = UDim2.new(0, 0, 0, 0)
	ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
	ripple.AnchorPoint = Vector2.new(0.5, 0.5)
	ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ripple.BackgroundTransparency = 0.3
	local rippleCorner = Instance.new("UICorner", ripple)
	rippleCorner.CornerRadius = UDim.new(1, 0)
	TweenService:Create(ripple, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(2, 0, 2, 0), BackgroundTransparency = 1}):Play()
	task.delay(0.3, function()
		if ripple then
			ripple:Destroy()
		end
	end)
end)

themeButton.MouseButton1Up:Connect(function()
	TweenService:Create(themeScale, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 1.1}):Play()
end)

themeButton.MouseButton1Click:Connect(function()
	toggleThemePanel()
end)

print("Theme button created in TitleBar; toggleThemePanel function defined.")

-- Services and setup
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui (or use your existing one)
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ThemeGui"
screenGui.Parent = player:WaitForChild("PlayerGui")

------------------------------------------------------------
-- Create the Theme Panel (GLOBAL so toggleThemePanel can access it)
------------------------------------------------------------
themePanel = Instance.new("Frame")  -- GLOBAL variable (do NOT use 'local')
themePanel.Name = "ThemePanel"
themePanel.Parent = screenGui
themePanel.AnchorPoint = Vector2.new(0.5, 0)
themePanel.Position = UDim2.new(0.75, 0, 0.15, 0)
themePanel.Size = UDim2.new(0, 240, 0, 320)  -- Height for title, close button & content
themePanel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
themePanel.BorderSizePixel = 0
themePanel.Visible = false  -- Start hidden so your toggle works

-- Rounded corners, stroke, and gradient for a cool look.
local panelCorner = Instance.new("UICorner", themePanel)
panelCorner.CornerRadius = UDim.new(0, 12)

local panelStroke = Instance.new("UIStroke", themePanel)
panelStroke.Thickness = 2
panelStroke.Color = Color3.fromRGB(50, 50, 50)
panelStroke.Transparency = 0.2

local panelGradient = Instance.new("UIGradient", themePanel)
panelGradient.Rotation = 45
panelGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30))
})

local panelPadding = Instance.new("UIPadding", themePanel)
panelPadding.PaddingTop = UDim.new(0, 10)
panelPadding.PaddingBottom = UDim.new(0, 10)
panelPadding.PaddingLeft = UDim.new(0, 10)
panelPadding.PaddingRight = UDim.new(0, 10)

------------------------------------------------------------
-- Title Label and Close Button
------------------------------------------------------------
-- Create a drop shadow by cloning the title and offsetting it.
local panelTitle = Instance.new("TextLabel")
panelTitle.Name = "PanelTitle"
panelTitle.Parent = themePanel
panelTitle.Size = UDim2.new(1, -40, 0, 40)  -- Increased height for extra style
panelTitle.Position = UDim2.new(0, 0, 0, 0)
panelTitle.BackgroundTransparency = 1
panelTitle.Text = "Select Theme"
panelTitle.Font = Enum.Font.GothamBold
panelTitle.TextSize = 26
panelTitle.TextScaled = true
panelTitle.TextColor3 = Color3.fromRGB(240, 240, 240)
panelTitle.TextStrokeTransparency = 0.5
panelTitle.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
panelTitle.ZIndex = 2

-- Add a gradient effect for a slick look.
local titleGradient = Instance.new("UIGradient", panelTitle)
titleGradient.Rotation = 90
titleGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(240, 240, 240)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))
})

-- Create a shadow label behind the title for extra depth.
local panelTitleShadow = panelTitle:Clone()
panelTitleShadow.Name = "PanelTitleShadow"
panelTitleShadow.Parent = themePanel
panelTitleShadow.Position = panelTitle.Position + UDim2.new(0, 2, 0, 2)
panelTitleShadow.TextColor3 = Color3.fromRGB(0, 0, 0)
panelTitleShadow.TextStrokeTransparency = 1
panelTitleShadow.ZIndex = panelTitle.ZIndex - 1

-- Create a UIScale object for hover scaling.
local titleScale = Instance.new("UIScale", panelTitle)
titleScale.Scale = 1

-- Smooth hover animations using TweenService.
local TweenService = game:GetService("TweenService")
local hoverTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

panelTitle.MouseEnter:Connect(function()
    TweenService:Create(titleScale, hoverTweenInfo, {Scale = 1.05}):Play()
    TweenService:Create(panelTitle, hoverTweenInfo, {TextColor3 = Color3.fromRGB(255, 255, 255)}):Play()
end)

panelTitle.MouseLeave:Connect(function()
    TweenService:Create(titleScale, hoverTweenInfo, {Scale = 1}):Play()
    TweenService:Create(panelTitle, hoverTweenInfo, {TextColor3 = Color3.fromRGB(240, 240, 240)}):Play()
end)

local TweenService = game:GetService("TweenService")

local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Parent = themePanel
closeButton.Size = UDim2.new(0, 32, 0, 32)
closeButton.Position = UDim2.new(1, -38, 0, 6)
closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
closeButton.Text = "X"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextScaled = true
closeButton.TextStrokeTransparency = 0.5
closeButton.BorderSizePixel = 0
closeButton.AutoButtonColor = false

-- Rounded corners and stroke for a smooth look
local closeCorner = Instance.new("UICorner", closeButton)
closeCorner.CornerRadius = UDim.new(0, 16)

local closeStroke = Instance.new("UIStroke", closeButton)
closeStroke.Thickness = 2
closeStroke.Color = Color3.fromRGB(150, 0, 0)
closeStroke.Transparency = 0

-- Drop shadow for depth
local shadow = Instance.new("Frame")
shadow.Name = "Shadow"
shadow.Parent = closeButton
shadow.AnchorPoint = Vector2.new(0.5, 0.5)
shadow.Position = UDim2.new(0.5, 3, 0.5, 3)
shadow.Size = UDim2.new(1, 0, 1, 0)
shadow.BackgroundColor3 = Color3.new(0, 0, 0)
shadow.BackgroundTransparency = 0.7
shadow.ZIndex = closeButton.ZIndex - 1
local shadowCorner = Instance.new("UICorner", shadow)
shadowCorner.CornerRadius = closeCorner.CornerRadius

-- Utility function for smooth tweens
local function smoothTween(object, properties, time)
	local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local tween = TweenService:Create(object, tweenInfo, properties)
	tween:Play()
	return tween
end

-- Fade out every GuiObject descendant of the panel simultaneously.
local function fadeOutPanel(panel, time)
	for _, v in pairs(panel:GetDescendants()) do
		if v:IsA("GuiObject") then
			local props = {}
			if v.BackgroundTransparency ~= nil then
				props.BackgroundTransparency = 1
			end
			if v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
				props.TextTransparency = 1
			end
			if v:IsA("ImageLabel") or v:IsA("ImageButton") then
				props.ImageTransparency = 1
			end
			smoothTween(v, props, time)
		end
	end
	task.delay(time, function()
		panel.Visible = false
		-- Reset panel transparency for next time if needed.
		for _, v in pairs(panel:GetDescendants()) do
			if v:IsA("GuiObject") then
				if v.BackgroundTransparency ~= nil then
					v.BackgroundTransparency = 0
				end
				if v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
					v.TextTransparency = 0
				end
				if v:IsA("ImageLabel") or v:IsA("ImageButton") then
					v.ImageTransparency = 0
				end
			end
		end
	end)
end

-- Hover Animations: lighten background and increase text size smoothly
closeButton.MouseEnter:Connect(function()
	smoothTween(closeButton, { BackgroundColor3 = Color3.fromRGB(255, 80, 80) }, 0.25)
	smoothTween(closeButton, { TextSize = 26 }, 0.25)
end)

closeButton.MouseLeave:Connect(function()
	smoothTween(closeButton, { BackgroundColor3 = Color3.fromRGB(200, 50, 50) }, 0.25)
	smoothTween(closeButton, { TextSize = 22 }, 0.25)
end)

-- Click Animations: a rippling effect and smooth panel fade-out
closeButton.MouseButton1Click:Connect(function()
	-- Create a ripple effect
	local ripple = Instance.new("Frame")
	ripple.Name = "Ripple"
	ripple.Parent = closeButton
	ripple.Size = UDim2.new(0, 0, 0, 0)
	ripple.AnchorPoint = Vector2.new(0.5, 0.5)
	ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
	ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ripple.BackgroundTransparency = 0.3
	ripple.ZIndex = closeButton.ZIndex + 1
	local rippleCorner = Instance.new("UICorner", ripple)
	rippleCorner.CornerRadius = closeCorner.CornerRadius
	
	smoothTween(ripple, { Size = UDim2.new(2, 0, 2, 0), BackgroundTransparency = 1 }, 0.35)
	task.delay(0.35, function()
		ripple:Destroy()
	end)
	
	-- Fade out the panel (all its children) simultaneously.
	fadeOutPanel(themePanel, 0.35)
end)



------------------------------------------------------------
-- Scrolling Frame for Theme Options
------------------------------------------------------------
local themeListFrame = Instance.new("ScrollingFrame")
themeListFrame.Name = "ThemeListFrame"
themeListFrame.Parent = themePanel
-- Start fully transparent, then fade into the desired transparency.
themeListFrame.BackgroundTransparency = 1  
themeListFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
themeListFrame.Position = UDim2.new(0, 0, 0, 40)  -- Positioned below the title area
themeListFrame.Size = UDim2.new(1, 0, 1, -40)
themeListFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
themeListFrame.ScrollBarThickness = 6
themeListFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
themeListFrame.BorderSizePixel = 0

-- Rounded corners for a smooth look.
local listCorner = Instance.new("UICorner", themeListFrame)
listCorner.CornerRadius = UDim.new(0, 12)

-- Outline stroke for a subtle border effect.
local listStroke = Instance.new("UIStroke", themeListFrame)
listStroke.Thickness = 1
listStroke.Color = Color3.fromRGB(50, 50, 50)
listStroke.Transparency = 0.2

-- Gradient background for depth.
local listGradient = Instance.new("UIGradient", themeListFrame)
listGradient.Rotation = 45
listGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30))
})

-- Padding for inner content.
local themeListPadding = Instance.new("UIPadding", themeListFrame)
themeListPadding.PaddingTop = UDim.new(0, 10)
themeListPadding.PaddingBottom = UDim.new(0, 10)
themeListPadding.PaddingLeft = UDim.new(0, 10)
themeListPadding.PaddingRight = UDim.new(0, 10)

-- Layout for theme options.
local themeListLayout = Instance.new("UIListLayout", themeListFrame)
themeListLayout.SortOrder = Enum.SortOrder.LayoutOrder
themeListLayout.Padding = UDim.new(0, 8)

-- Dynamically update CanvasSize based on content height.
themeListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    themeListFrame.CanvasSize = UDim2.new(0, 0, 0, themeListLayout.AbsoluteContentSize.Y + 20)
end)

-- Smoothly fade in the panel background.
TweenService:Create(themeListFrame, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {BackgroundTransparency = 0.1}):Play()

-- Add a subtle pulsing animation on the gradient for extra dynamism.
spawn(function()
    while themeListFrame.Parent do
        TweenService:Create(listGradient, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), 
            {Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(45, 45, 45)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 35))
            })}):Play()
        wait(2)
        TweenService:Create(listGradient, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), 
            {Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30))
            })}):Play()
        wait(2)
    end
end)



------------------------------------------------------------
-- Draggable Functionality for the Panel
------------------------------------------------------------
local dragging = false
local dragStart, startPos

themePanel.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = UserInputService:GetMouseLocation()
        startPos = themePanel.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

RunService.RenderStepped:Connect(function()
    if dragging then
        local currentPos = UserInputService:GetMouseLocation()
        local delta = currentPos - dragStart
        themePanel.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

------------------------------------------------------------
-- Optional: Panel Hover Scaling Effect
------------------------------------------------------------
local panelScale = Instance.new("UIScale", themePanel)
panelScale.Scale = 1

themePanel.MouseEnter:Connect(function()
    TweenService:Create(panelScale, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Scale = 1.05
    }):Play()
end)
themePanel.MouseLeave:Connect(function()
    TweenService:Create(panelScale, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Scale = 1
    }):Play()
end)

------------------------------------------------------------
-- Reparent any new theme option buttons into the scrolling frame
------------------------------------------------------------
themePanel.ChildAdded:Connect(function(child)
    if child:IsA("TextButton") and child.Name:match("^ThemeOption_") then
        -- Use defer to ensure proper parenting after creation
        task.defer(function()
            child.Parent = themeListFrame
        end)
    end
end)


local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-----------------------------------------------
-- THEME DEFINITIONS (Easily Extendable)
-----------------------------------------------
local themes = {
	["Light (Why?)"] = {
		-- Primary: white; Secondary: black.
		MainColor = Color3.fromRGB(255, 255, 255),           -- Backgrounds
		StrokeColor = Color3.fromRGB(0, 0, 0),                -- Outline/stroke
		OverlayGradientColors = ColorSequence.new({          -- Overlay gradient on mainFrame
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 240, 240))
		}),
		TitleBarColor = Color3.fromRGB(255, 255, 255),         -- TitleBar background
		TitleGradientColors = ColorSequence.new({            -- TitleBar gradient
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(230, 230, 230))
		}),
		AccentColor = Color3.fromRGB(0, 0, 0),                 -- Accent line
		TextGradientColors = ColorSequence.new({             -- TitleText gradient
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 50, 50))
		}),
		TitleTextColor = Color3.fromRGB(0, 0, 0)               -- Title text color
	},
	["Dark"] = {
		-- Primary: black; Secondary: gray.
		MainColor = Color3.fromRGB(0, 0, 0),
		StrokeColor = Color3.fromRGB(128, 128, 128),
		OverlayGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 20))
		}),
		TitleBarColor = Color3.fromRGB(0, 0, 0),
		TitleGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30))
		}),
		AccentColor = Color3.fromRGB(128, 128, 128),
		TextGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(128, 128, 128)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(160, 160, 160))
		}),
		TitleTextColor = Color3.fromRGB(128, 128, 128)
	},
	["Classic"] = {
		-- Primary: dark blue/black; Secondary: bright blue.
		MainColor = Color3.fromRGB(20, 20, 30),
		StrokeColor = Color3.fromRGB(0, 150, 255),
		OverlayGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 20))
		}),
		TitleBarColor = Color3.fromRGB(20, 20, 30),
		TitleGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 150, 255))
		}),
		AccentColor = Color3.fromRGB(0, 150, 255),
		TextGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 150, 255)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 240, 240))
		}),
		TitleTextColor = Color3.fromRGB(240, 240, 240)
	},
	["Neon"] = {
		-- Primary: near-black; Secondary: neon cyan/pink mix.
		MainColor = Color3.fromRGB(10, 10, 10),
		StrokeColor = Color3.fromRGB(0, 255, 255),
		OverlayGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(10, 10, 30)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 10, 20))
		}),
		TitleBarColor = Color3.fromRGB(10, 10, 10),
		TitleGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(10, 10, 10)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 255, 255))
		}),
		AccentColor = Color3.fromRGB(255, 20, 147),
		TextGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 0)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
		}),
		TitleTextColor = Color3.fromRGB(255, 255, 255)
	},
	["Retro"] = {
		-- Primary: muted beige; Secondary: dark brown.
		MainColor = Color3.fromRGB(240, 230, 210),
		StrokeColor = Color3.fromRGB(150, 120, 100),
		OverlayGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(240, 230, 210)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(210, 190, 170))
		}),
		TitleBarColor = Color3.fromRGB(210, 190, 170),
		TitleGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(210, 190, 170)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 160, 140))
		}),
		AccentColor = Color3.fromRGB(100, 80, 60),
		TextGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(80, 60, 40)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(120, 100, 80))
		}),
		TitleTextColor = Color3.fromRGB(80, 60, 40)
	},
	-- New Themes
	["Forest"] = {
		-- A nature-inspired theme with rich greens and earthy accents.
		MainColor = Color3.fromRGB(34, 139, 34),      -- ForestGreen
		StrokeColor = Color3.fromRGB(0, 100, 0),        -- DarkGreen
		OverlayGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(34, 139, 34)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 205, 50))  -- LimeGreen
		}),
		TitleBarColor = Color3.fromRGB(34, 139, 34),
		TitleGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(34, 139, 34)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 128, 0))
		}),
		AccentColor = Color3.fromRGB(139, 69, 19),      -- SaddleBrown
		TextGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 70, 0)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(144, 238, 144))  -- LightGreen
		}),
		TitleTextColor = Color3.fromRGB(255, 255, 255)
	},
	["Sunset"] = {
		-- A warm, vibrant theme reminiscent of a fiery sunset.
		MainColor = Color3.fromRGB(255, 140, 0),        -- DarkOrange
		StrokeColor = Color3.fromRGB(255, 69, 0),         -- OrangeRed
		OverlayGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 140, 0)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 215, 0))   -- Gold
		}),
		TitleBarColor = Color3.fromRGB(255, 140, 0),
		TitleGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 140, 0)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 69, 0))
		}),
		AccentColor = Color3.fromRGB(220, 20, 60),       -- Crimson
		TextGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(128, 0, 0)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 99, 71))    -- Tomato
		}),
		TitleTextColor = Color3.fromRGB(255, 255, 255)
	},
	["Ocean"] = {
		-- A cool, refreshing theme inspired by the deep blue sea.
		MainColor = Color3.fromRGB(0, 105, 148),        -- Ocean Blue
		StrokeColor = Color3.fromRGB(0, 70, 110),
		OverlayGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 105, 148)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 191, 255))   -- DeepSkyBlue
		}),
		TitleBarColor = Color3.fromRGB(0, 105, 148),
		TitleGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 105, 148)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 70, 130))
		}),
		AccentColor = Color3.fromRGB(255, 127, 80),       -- Coral
		TextGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(173, 216, 230)),  -- LightBlue
			ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 248, 255))   -- AliceBlue
		}),
		TitleTextColor = Color3.fromRGB(255, 255, 255)
	},
	["Violet"] = {
		-- A mysterious, moody theme built around deep purples.
		MainColor = Color3.fromRGB(75, 0, 130),         -- Indigo
		StrokeColor = Color3.fromRGB(138, 43, 226),       -- BlueViolet
		OverlayGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(75, 0, 130)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(147, 112, 219))   -- MediumPurple
		}),
		TitleBarColor = Color3.fromRGB(75, 0, 130),
		TitleGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(75, 0, 130)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(138, 43, 226))
		}),
		AccentColor = Color3.fromRGB(255, 105, 180),      -- HotPink
		TextGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(221, 160, 221)),  -- Plum
			ColorSequenceKeypoint.new(1, Color3.fromRGB(238, 130, 238))   -- Violet
		}),
		TitleTextColor = Color3.fromRGB(255, 255, 255)
	},
	["Candy"] = {
		-- A playful, pastel theme full of sweet hues.
		MainColor = Color3.fromRGB(255, 182, 193),       -- LightPink
		StrokeColor = Color3.fromRGB(216, 191, 216),       -- Thistle
		OverlayGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 182, 193)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 240, 245))   -- LavenderBlush
		}),
		TitleBarColor = Color3.fromRGB(255, 182, 193),
		TitleGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 182, 193)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 105, 180))
		}),
		AccentColor = Color3.fromRGB(255, 20, 147),        -- DeepPink
		TextGradientColors = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(199, 21, 133)),   -- MediumVioletRed
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 182, 193))    -- LightPink
		}),
		TitleTextColor = Color3.fromRGB(80, 0, 80)
	},
["Crimson"] = {
	-- Primary: black; Secondary: crimson red.
	MainColor = Color3.fromRGB(0, 0, 0),  -- Primary (Backgrounds)
	StrokeColor = Color3.fromRGB(220, 20, 60),  -- Secondary (Crimson Red)
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 20, 60))
	}),
	TitleBarColor = Color3.fromRGB(0, 0, 0),  -- Primary (TitleBar Background)
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 20, 60))
	}),
	AccentColor = Color3.fromRGB(220, 20, 60),  -- Secondary (Accent)
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(220, 20, 60)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 20, 60))
	}),
	TitleTextColor = Color3.fromRGB(220, 20, 60)  -- Secondary (Title Text)
},
["Cyber"] = {
	-- A futuristic, neon theme with a dark base and bright cyan accents.
	MainColor = Color3.fromRGB(0, 0, 0),
	StrokeColor = Color3.fromRGB(0, 255, 255),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 150, 255))
	}),
	TitleBarColor = Color3.fromRGB(0, 0, 0),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 255, 255))
	}),
	AccentColor = Color3.fromRGB(0, 255, 255),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
	}),
	TitleTextColor = Color3.fromRGB(0, 255, 255)
},

["Vintage"] = {
	-- A warm, old-time feel with earthy browns and tan highlights.
	MainColor = Color3.fromRGB(102, 51, 0),
	StrokeColor = Color3.fromRGB(160, 82, 45),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(102, 51, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(210, 180, 140))
	}),
	TitleBarColor = Color3.fromRGB(102, 51, 0),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(102, 51, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(160, 82, 45))
	}),
	AccentColor = Color3.fromRGB(160, 82, 45),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(160, 82, 45)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(245, 222, 179))
	}),
	TitleTextColor = Color3.fromRGB(245, 222, 179)
},

["Mystic"] = {
	-- A deep, enchanting theme with dark purples and hints of magenta.
	MainColor = Color3.fromRGB(30, 0, 50),
	StrokeColor = Color3.fromRGB(148, 0, 211),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 0, 50)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(75, 0, 130))
	}),
	TitleBarColor = Color3.fromRGB(30, 0, 50),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 0, 50)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(148, 0, 211))
	}),
	AccentColor = Color3.fromRGB(138, 43, 226),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(138, 43, 226)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 162, 200))
	}),
	TitleTextColor = Color3.fromRGB(200, 162, 200)
},

["Oceanic"] = {
	-- A deep-sea inspired theme with navy tones and refreshing blues.
	MainColor = Color3.fromRGB(0, 32, 63),
	StrokeColor = Color3.fromRGB(0, 191, 255),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 32, 63)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 105, 148))
	}),
	TitleBarColor = Color3.fromRGB(0, 32, 63),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 32, 63)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 191, 255))
	}),
	AccentColor = Color3.fromRGB(0, 191, 255),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 191, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 248, 255))
	}),
	TitleTextColor = Color3.fromRGB(240, 248, 255)
},

["Sahara"] = {
	-- A sun-soaked desert theme with sandy tones and warm accents.
	MainColor = Color3.fromRGB(237, 201, 175),
	StrokeColor = Color3.fromRGB(189, 183, 107),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(237, 201, 175)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(222, 184, 135))
	}),
	TitleBarColor = Color3.fromRGB(237, 201, 175),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(237, 201, 175)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(189, 183, 107))
	}),
	AccentColor = Color3.fromRGB(189, 183, 107),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(189, 183, 107)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(139, 69, 19))
	}),
	TitleTextColor = Color3.fromRGB(139, 69, 19)
},

["Inferno"] = {
	-- A blazing theme of fire and heat with deep reds and oranges.
	MainColor = Color3.fromRGB(50, 0, 0),
	StrokeColor = Color3.fromRGB(255, 69, 0),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 0, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
	}),
	TitleBarColor = Color3.fromRGB(50, 0, 0),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 0, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 69, 0))
	}),
	AccentColor = Color3.fromRGB(255, 69, 0),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 69, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 160, 122))
	}),
	TitleTextColor = Color3.fromRGB(255, 160, 122)
},

["Arctic"] = {
	-- A cool, frosty theme with crisp blues and icy accents.
	MainColor = Color3.fromRGB(200, 225, 255),
	StrokeColor = Color3.fromRGB(135, 206, 250),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 225, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(173, 216, 230))
	}),
	TitleBarColor = Color3.fromRGB(200, 225, 255),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 225, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(135, 206, 250))
	}),
	AccentColor = Color3.fromRGB(135, 206, 250),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(135, 206, 250)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
	}),
	TitleTextColor = Color3.fromRGB(0, 0, 0)
},

["Cosmic"] = {
	-- A mysterious theme inspired by deep space with dark blues and purples.
	MainColor = Color3.fromRGB(20, 0, 40),
	StrokeColor = Color3.fromRGB(75, 0, 130),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 0, 40)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 0, 80))
	}),
	TitleBarColor = Color3.fromRGB(20, 0, 40),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 0, 40)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(75, 0, 130))
	}),
	AccentColor = Color3.fromRGB(75, 0, 130),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(75, 0, 130)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 255))
	}),
	TitleTextColor = Color3.fromRGB(200, 200, 255)
},

["Jungle"] = {
	-- A lush, green theme evoking the dense vibrancy of the rainforest.
	MainColor = Color3.fromRGB(0, 68, 27),
	StrokeColor = Color3.fromRGB(34, 139, 34),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 68, 27)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 100, 0))
	}),
	TitleBarColor = Color3.fromRGB(0, 68, 27),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 68, 27)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(34, 139, 34))
	}),
	AccentColor = Color3.fromRGB(34, 139, 34),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(34, 139, 34)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(144, 238, 144))
	}),
	TitleTextColor = Color3.fromRGB(255, 255, 255)
},

["Lemonade"] = {
	-- A bright, citrus-inspired theme with soft yellows and golden accents.
	MainColor = Color3.fromRGB(255, 250, 205),
	StrokeColor = Color3.fromRGB(255, 255, 0),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 250, 205)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 0))
	}),
	TitleBarColor = Color3.fromRGB(255, 250, 205),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 250, 205)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 0))
	}),
	AccentColor = Color3.fromRGB(255, 255, 0),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 215, 0))
	}),
	TitleTextColor = Color3.fromRGB(128, 128, 0)
},

["Magenta"] = {
	-- A bold, vibrant theme dominated by striking magenta hues.
	MainColor = Color3.fromRGB(50, 0, 25),
	StrokeColor = Color3.fromRGB(255, 0, 255),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 0, 25)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))
	}),
	TitleBarColor = Color3.fromRGB(50, 0, 25),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 0, 25)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))
	}),
	AccentColor = Color3.fromRGB(255, 0, 255),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 192, 203))
	}),
	TitleTextColor = Color3.fromRGB(255, 192, 203)
},

["Copper"] = {
	-- A warm, metallic theme with rich copper tones and deep accents.
	MainColor = Color3.fromRGB(184, 115, 51),
	StrokeColor = Color3.fromRGB(128, 64, 0),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(184, 115, 51)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(210, 105, 30))
	}),
	TitleBarColor = Color3.fromRGB(184, 115, 51),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(184, 115, 51)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(128, 64, 0))
	}),
	AccentColor = Color3.fromRGB(128, 64, 0),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(128, 64, 0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 228, 196))
	}),
	TitleTextColor = Color3.fromRGB(255, 228, 196)
},

["Smoky"] = {
	-- A subdued theme of grays that evokes a misty, foggy atmosphere.
	MainColor = Color3.fromRGB(105, 105, 105),
	StrokeColor = Color3.fromRGB(169, 169, 169),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(105, 105, 105)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(169, 169, 169))
	}),
	TitleBarColor = Color3.fromRGB(105, 105, 105),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(105, 105, 105)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(169, 169, 169))
	}),
	AccentColor = Color3.fromRGB(169, 169, 169),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(169, 169, 169)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(211, 211, 211))
	}),
	TitleTextColor = Color3.fromRGB(211, 211, 211)
},

["Iridescent"] = {
	-- A shimmering theme that changes between cool blues and soft violets.
	MainColor = Color3.fromRGB(123, 104, 238),
	StrokeColor = Color3.fromRGB(72, 61, 139),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(123, 104, 238)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(72, 61, 139))
	}),
	TitleBarColor = Color3.fromRGB(123, 104, 238),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(123, 104, 238)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(72, 61, 139))
	}),
	AccentColor = Color3.fromRGB(72, 61, 139),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 61, 139)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(216, 191, 216))
	}),
	TitleTextColor = Color3.fromRGB(216, 191, 216)
},

["Frost"] = {
	-- A cool, icy theme with light blues and frosted accents.
	MainColor = Color3.fromRGB(230, 240, 255),
	StrokeColor = Color3.fromRGB(180, 210, 255),
	OverlayGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(230, 240, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 220, 255))
	}),
	TitleBarColor = Color3.fromRGB(230, 240, 255),
	TitleGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(230, 240, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 210, 255))
	}),
	AccentColor = Color3.fromRGB(180, 210, 255),
	TextGradientColors = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(180, 210, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
	}),
	TitleTextColor = Color3.fromRGB(0, 0, 50)
}

}


-----------------------------------------------
-- Helper: Tween a UIGradient's Color property
-----------------------------------------------
local function tweenColorSequence(gradient, targetSequence, tweenInfo)
    local proxy = Instance.new("NumberValue")
    proxy.Value = 0
    local tween = TweenService:Create(proxy, tweenInfo, {Value = 1})
    tween:Play()
    proxy.Changed:Connect(function(val)
        local alpha = val
        local startSeq = gradient.Color
        local newKeypoints = {}
        local keypoints = startSeq.Keypoints
        local targetKeypoints = targetSequence.Keypoints
        for i = 1, math.min(#keypoints, #targetKeypoints) do
            local kp = keypoints[i]
            local targetKP = targetKeypoints[i]
            local newColor = kp.Value:Lerp(targetKP.Value, alpha)
            table.insert(newKeypoints, ColorSequenceKeypoint.new(kp.Time, newColor))
        end
        gradient.Color = ColorSequence.new(newKeypoints)
    end)
    tween.Completed:Connect(function() proxy:Destroy() end)
    return tween
end

-----------------------------------------------
-- APPLY THEME FUNCTION (Changes the Whole UI)
-----------------------------------------------
local function applyTheme(themeName, callback)
    local themeData = themes[themeName]
    if not themeData then
        warn("Theme not found: " .. themeName)
        return
    end

    local tweenTime = 0.5
    local easingInfo = TweenInfo.new(tweenTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tweens = {}

    local function tweenElement(element, properties, elementName)
        if element then
            -- If the property "Color" is a UIGradient property (i.e. a ColorSequence), handle it with our proxy tween.
            if element:IsA("UIGradient") and properties.Color then
                local targetSequence = properties.Color
                properties.Color = nil -- remove, so we don't try to tween directly
                local gradTween = tweenColorSequence(element, targetSequence, easingInfo)
                table.insert(tweens, gradTween)
            else
                local tw = TweenService:Create(element, easingInfo, properties)
                tw:Play()
                table.insert(tweens, tw)
            end
        else
            warn("Missing UI element [" .. (elementName or "unknown") .. "] when applying properties: ", properties)
        end
    end

    local elems = _G.UIThemeElements  -- Your mainframe code should expose its elements here.
    if not elems then
        warn("UIThemeElements not found! Make sure your mainframe code exposes its UI elements.")
        return
    end

    -- Update mainFrame background
    tweenElement(elems.mainFrame, { BackgroundColor3 = themeData.MainColor }, "mainFrame")
    -- Update mainStroke color
    tweenElement(elems.mainStroke, { Color = themeData.StrokeColor }, "mainStroke")
    -- Update overlay gradient
    tweenElement(elems.overlayGradient, { Color = themeData.OverlayGradientColors }, "overlayGradient")
    -- Update titleBar background
    tweenElement(elems.titleBar, { BackgroundColor3 = themeData.TitleBarColor }, "titleBar")
    -- Update title gradient
    tweenElement(elems.titleGradient, { Color = themeData.TitleGradientColors }, "titleGradient")
    -- Update accent line
    tweenElement(elems.accentLine, { BackgroundColor3 = themeData.AccentColor }, "accentLine")
    -- Update title text color
    tweenElement(elems.titleText, { TextColor3 = themeData.TitleTextColor }, "titleText")
    -- Update text gradient
    if elems.textGradient and themeData.TextGradientColors then
        tweenElement(elems.textGradient, { Color = themeData.TextGradientColors }, "textGradient")
    end

    -- Wait for all tweens to complete before calling callback
    local total = 0
    for _, tw in ipairs(tweens) do
        if tw then total = total + 1 end
    end
    if total == 0 then
        if callback then callback() end
        return
    end

    local completed = 0
    local function onTweenCompleted()
        completed = completed + 1
        if completed >= total then
            print("All theme tweens completed for theme: " .. themeName)
            if callback then callback() end
        end
    end
    for _, tw in ipairs(tweens) do
        if tw then
            tw.Completed:Connect(onTweenCompleted)
        end
    end

    print("Theme applied: " .. themeName)
end


-----------------------------------------------
-- THEME OPTION BUTTONS (Automatically Generated)
-----------------------------------------------
for themeName, themeData in pairs(themes) do
    local themeOption = Instance.new("TextButton")
    themeOption.Name = "ThemeOption_" .. themeName
    themeOption.Parent = themePanel  -- (It will be auto-reparented to your scrolling frame)
    themeOption.Size = UDim2.new(1, 0, 0, 40)  -- Taller for better preview
    themeOption.BackgroundColor3 = themeData.MainColor or Color3.fromRGB(50, 50, 50)
    themeOption.BorderSizePixel = 0
    themeOption.Text = themeName
    themeOption.Font = Enum.Font.GothamBold
    themeOption.TextSize = 20

    -- Ensure text contrast: if background is very dark, force white text.
    local bg = themeData.MainColor or Color3.fromRGB(50,50,50)
    local isDark = (bg.R < 0.2 and bg.G < 0.2 and bg.B < 0.2)
    themeOption.TextColor3 = isDark and Color3.fromRGB(255,255,255) or (themeData.TitleTextColor or Color3.fromRGB(240,240,240))
    themeOption.TextStrokeTransparency = 0
    themeOption.TextStrokeColor3 = Color3.new(0,0,0)
    themeOption.LayoutOrder = 2
    themeOption.AutoButtonColor = false

    -- Rounded corners
    local optionCorner = Instance.new("UICorner", themeOption)
    optionCorner.CornerRadius = UDim.new(0, 8)

    -- Apply the theme's gradient if available.
    if themeData.OverlayGradientColors then
        local optionGradient = Instance.new("UIGradient", themeOption)
        optionGradient.Rotation = 45
        optionGradient.Color = themeData.OverlayGradientColors
    end

    -- Outline stroke matching the theme.
    local optionStroke = Instance.new("UIStroke", themeOption)
    optionStroke.Thickness = 1
    optionStroke.Color = themeData.StrokeColor or Color3.new(0,0,0)
    optionStroke.Transparency = 0.2

    -- Create a UIScale for smooth scaling animations.
    local uiScale = Instance.new("UIScale", themeOption)
    uiScale.Scale = 1

    local tweenTime = 0.3

    -- Smooth Hover Animation using Sine easing.
    themeOption.MouseEnter:Connect(function()
        TweenService:Create(uiScale, TweenInfo.new(tweenTime, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Scale = 1.05}):Play()
        local accent = themeData.AccentColor or themeData.MainColor
        local lightened = (themeData.MainColor or Color3.fromRGB(50,50,50)):Lerp(Color3.fromRGB(255,255,255), 0.1)
        TweenService:Create(themeOption, TweenInfo.new(tweenTime, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
            BackgroundColor3 = lightened
        }):Play()
    end)

    themeOption.MouseLeave:Connect(function()
        TweenService:Create(uiScale, TweenInfo.new(tweenTime, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Scale = 1}):Play()
        TweenService:Create(themeOption, TweenInfo.new(tweenTime, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
            BackgroundColor3 = themeData.MainColor
        }):Play()
    end)

    -- Smooth Click Animation: a gentle pulse effect.
    themeOption.MouseButton1Click:Connect(function()
        local originalTransparency = themeOption.BackgroundTransparency
        local pulseDown = TweenService:Create(themeOption, TweenInfo.new(tweenTime / 2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {BackgroundTransparency = 0.2})
        local pulseUp = TweenService:Create(themeOption, TweenInfo.new(tweenTime / 2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {BackgroundTransparency = originalTransparency})
        pulseDown:Play()
        pulseDown.Completed:Connect(function()
            pulseUp:Play()
        end)
        applyTheme(themeName)
    end)
end


-- Constants for layout spacing
local TAB_BUTTONS_HEIGHT = 40
local TAB_BUTTONS_Y = 60
local TAB_CONTENT_Y = TAB_BUTTONS_Y + TAB_BUTTONS_HEIGHT + 10  -- Add extra spacing below tab buttons
local BOTTOM_OFFSET = 50

-- Create and configure the Tab Buttons Frame
local tabButtonsFrame = Instance.new("Frame")
tabButtonsFrame.Name = "TabButtonsFrame"
tabButtonsFrame.Parent = mainFrame
tabButtonsFrame.Size = UDim2.new(1, 0, 0, TAB_BUTTONS_HEIGHT)
tabButtonsFrame.Position = UDim2.new(0, 0, 0, TAB_BUTTONS_Y)
tabButtonsFrame.BackgroundTransparency = 1
tabButtonsFrame.ZIndex = 2  -- Ensure it is on top of tab content

-- Create and configure the Tab Content Frame
local tabContentFrame = Instance.new("Frame")
tabContentFrame.Name = "TabContentFrame"
tabContentFrame.Parent = mainFrame
tabContentFrame.Size = UDim2.new(1, 0, 1, -BOTTOM_OFFSET)
tabContentFrame.Position = UDim2.new(0, 0, 0, TAB_CONTENT_Y)  -- Move it further down
tabContentFrame.BackgroundTransparency = 1
tabContentFrame.ClipsDescendants = false  -- Allow content to be visible
tabContentFrame.ZIndex = 1  -- Ensure it stays behind elements

-- Add UIPadding to push the tab content down
local uiPadding = Instance.new("UIPadding")
uiPadding.Parent = tabContentFrame
uiPadding.PaddingTop = UDim.new(0, 0)  -- Move content down slightly

-- Add a UIListLayout to manage the layout of the tab content
local contentLayout = Instance.new("UIListLayout")
contentLayout.Parent = tabContentFrame
contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
contentLayout.Padding = UDim.new(0, 5)  -- Add small spacing between elements

-- SERVICES
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")


local windowAPI = {}
windowAPI.TabButtonsFrame = tabButtonsFrame
windowAPI.TabContentFrame = tabContentFrame
windowAPI.Tabs = {}
windowAPI.ActiveTab = nil



-- Tabs
local TweenService = game:GetService("TweenService")
local function tween(object, properties, duration, easingStyle, easingDirection, delay, callback)
	local tweenInfo = TweenInfo.new(duration or 0.3, easingStyle or Enum.EasingStyle.Sine, easingDirection or Enum.EasingDirection.Out, 0, false, delay or 0)
	local t = TweenService:Create(object, tweenInfo, properties)
	if callback then
		t.Completed:Connect(callback)
	end
	t:Play()
	return t
end

local function createTab(windowAPI, tabName)
	local tab = {}
	tab.Name = tabName
	tab.Sections = {}
	local tabButtonsFrame = windowAPI.TabButtonsFrame
	
	-- Make sure the tab buttons frame has a UIListLayout.
	if not tabButtonsFrame:FindFirstChildOfClass("UIListLayout") then
		local listLayout = Instance.new("UIListLayout")
		listLayout.FillDirection = Enum.FillDirection.Horizontal
		listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
		listLayout.VerticalAlignment = Enum.VerticalAlignment.Center
		listLayout.Padding = UDim.new(0, 4.5)
		listLayout.Parent = tabButtonsFrame
	end

	-- Create the tab button using a blue theme.
	local tabButton = Instance.new("TextButton")
	tabButton.Name = "TabButton"
	tabButton.Text = tabName
	tabButton.Size = UDim2.new(0, 120, 1, 0)
	-- Normal state: a nice blue that contrasts well with a black background.
	-- Text is white for clarity.
	tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	tabButton.Font = Enum.Font.GothamBold
	tabButton.TextSize = 16
	tabButton.AutoButtonColor = false
	tabButton.BorderSizePixel = 0
	tabButton.ZIndex = 1
	tabButton.Parent = tabButtonsFrame

	-- Apply a subtle blue gradient.
	local buttonGradient = Instance.new("UIGradient")
	buttonGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(52, 152, 219)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(42, 132, 199))
	})
	buttonGradient.Rotation = 90
	buttonGradient.Parent = tabButton

	-- Rounded corners.
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = tabButton

local TweenService = game:GetService("TweenService")

local indicator = Instance.new("Frame")
indicator.Name = "ActiveIndicator"
indicator.Size = UDim2.new(0, 0, 0, 3)
indicator.Position = UDim2.new(0, 0, 1, -3)
indicator.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
indicator.BackgroundTransparency = 0
indicator.BorderSizePixel = 0
indicator.ZIndex = 3
indicator.Parent = tabButton

local gradient = Instance.new("UIGradient", indicator)
gradient.Rotation = 90
gradient.Color = ColorSequence.new({
	ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 150, 255)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 200, 255))
})

TweenService:Create(indicator, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, 3)}):Play()

local scaleObj = Instance.new("UIScale")
scaleObj.Scale = 1
scaleObj.Parent = tabButton

tabButton.Rotation = 0

tabButton.MouseEnter:Connect(function()
	if windowAPI.ActiveTab ~= tab then
		tween(scaleObj, {Scale = 1.1}, 0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
		tween(tabButton, {BackgroundColor3 = Color3.fromRGB(74, 168, 230), Rotation = 2}, 0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
	end
end)

tabButton.MouseLeave:Connect(function()
	if windowAPI.ActiveTab ~= tab then
		tween(scaleObj, {Scale = 1}, 0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
		tween(tabButton, {BackgroundColor3 = Color3.fromRGB(52, 152, 219), Rotation = 0}, 0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
	end
end)


	-- On click, reset all tabs then activate this one.
	tabButton.MouseButton1Click:Connect(function()
		for _, t in pairs(windowAPI.Tabs) do
			if t.Button then
				tween(t.Button, {BackgroundColor3 = Color3.fromRGB(52, 152, 219)}, 0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
				local ind = t.Button:FindFirstChild("ActiveIndicator")
				if ind then
					tween(ind, {BackgroundTransparency = 1}, 0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
				end
				local s = t.Button:FindFirstChildOfClass("UIScale")
				if s then
					tween(s, {Scale = 1}, 0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
				end
			end
			if t.Content then
				t.Content.Visible = false
			end
		end
		-- Active state: change to a slightly darker blue.
		tween(tabButton, {BackgroundColor3 = Color3.fromRGB(32, 132, 199)}, 0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
		if tabButton:FindFirstChild("ActiveIndicator") then
			tween(tabButton.ActiveIndicator, {BackgroundTransparency = 0}, 0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
		end
		tab.Content.Visible = true
		windowAPI.ActiveTab = tab
	end)

	-- If this is the first tab, set it as active.
	local initActive = not windowAPI.ActiveTab
	if initActive then
		windowAPI.ActiveTab = tab 
		tween(tabButton, {BackgroundColor3 = Color3.fromRGB(32, 132, 199)}, 0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
		if tabButton:FindFirstChild("ActiveIndicator") then
			tween(tabButton.ActiveIndicator, {BackgroundTransparency = 0}, 0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
		end
	end

	-- Create the tab content container.
	local tabContent = Instance.new("ScrollingFrame")
	tabContent.Name = "TabContent_" .. tabName
	tabContent.Size = UDim2.new(1, -10, 1, -10)
	tabContent.Position = UDim2.new(0, 5, 0, 5)
	tabContent.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	tabContent.BackgroundTransparency = 1
	tabContent.BorderSizePixel = 0
	tabContent.ScrollBarThickness = 4
	tabContent.Visible = initActive
	tabContent.ZIndex = 0
	tabContent.Parent = windowAPI.TabContentFrame

	local listLayout = Instance.new("UIListLayout")
	listLayout.SortOrder = Enum.SortOrder.LayoutOrder
	listLayout.Padding = UDim.new(0, 3)
	listLayout.Parent = tabContent

	tab.Button = tabButton
	tab.Content = tabContent

function tab:AddSection(sectionName)
	local section = {}
	section.Name = sectionName
	local sectionFrame = Instance.new("Frame")
	sectionFrame.Name = "Section_" .. sectionName
	sectionFrame.Size = UDim2.new(0.1, 0, 0, 0)
	sectionFrame.BackgroundTransparency = 1
	sectionFrame.Parent = tabContent

	local sectionLayout = Instance.new("UIListLayout", sectionFrame)
	sectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
	sectionLayout.Padding = UDim.new(0, 12)

	section.Frame = sectionFrame

	function section:AddSlider(opts, callback)
		createSlider(sectionFrame, opts, callback)
	end
	function section:AddToggle(opts, callback)
		createToggle(sectionFrame, opts, callback)
	end
	function section:AddButton(opts, callback)
		createButton(sectionFrame, opts, callback)
	end

	table.insert(tab.Sections, section)
	return section
end

	table.insert(windowAPI.Tabs, tab)
	return tab
end
--------------------------------------------------
-- Add a new tab via your windowAPI.
--------------------------------------------------
function windowAPI:AddTab(tabName)
	return createTab(self, tabName)
end

---------------------------
-- Expose the Base Window API Globally via a CometUI module
---------------------------
local CometUI = {}
function CometUI:CreateWindow(config)
    if config then
        if config.Title then
            titleText.Text = config.Title
        end
        if config.Size then
            mainFrame.Size = config.Size
            mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        end
    end
    return windowAPI
end

_G.baseWindow = CometUI:CreateWindow({ Title = "CometWare", Size = UDim2.new(0,500,0,400) })
print("Base UI created. Use _G.baseWindow:AddTab('Tab Name') to add a new tab.")

local MainTab = _G.baseWindow:AddTab("Main")
local MainSection = MainTab:AddSection("main")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Toggle for Skeleton ESP
local skeletonESPEnabled = false
local espConnection

-- Table to hold each enemy’s ESP lines
local skeletonESP = {}

-- Get the connections (joints) for the character.
-- For R6, we assume parts: "Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"
-- For R15, we use a more detailed set.
local function getSkeletonConnections(character)
    local connections = {}
    if character:FindFirstChild("UpperTorso") then
        -- R15 rig connections
        table.insert(connections, {"Head", "UpperTorso"})
        table.insert(connections, {"UpperTorso", "LeftUpperArm"})
        table.insert(connections, {"LeftUpperArm", "LeftLowerArm"})
        table.insert(connections, {"LeftLowerArm", "LeftHand"})
        table.insert(connections, {"UpperTorso", "RightUpperArm"})
        table.insert(connections, {"RightUpperArm", "RightLowerArm"})
        table.insert(connections, {"RightLowerArm", "RightHand"})
        table.insert(connections, {"UpperTorso", "LowerTorso"})
        table.insert(connections, {"LowerTorso", "LeftUpperLeg"})
        table.insert(connections, {"LeftUpperLeg", "LeftLowerLeg"})
        table.insert(connections, {"LeftLowerLeg", "LeftFoot"})
        table.insert(connections, {"LowerTorso", "RightUpperLeg"})
        table.insert(connections, {"RightUpperLeg", "RightLowerLeg"})
        table.insert(connections, {"RightLowerLeg", "RightFoot"})
    else
        -- Assume R6 rig
        table.insert(connections, {"Head", "Torso"})
        table.insert(connections, {"Torso", "Left Arm"})
        table.insert(connections, {"Torso", "Right Arm"})
        table.insert(connections, {"Torso", "Left Leg"})
        table.insert(connections, {"Torso", "Right Leg"})
    end
    return connections
end

-- Create drawing objects for a given enemy player.
local function createSkeletonDrawing(player)
    if skeletonESP[player] then return end
    skeletonESP[player] = {}  -- Table of connection data for this player
    local character = player.Character
    if not character then return end
    local connections = getSkeletonConnections(character)
    for i, conn in ipairs(connections) do
        local line = Drawing.new("Line")
        line.Visible = false
        line.Color = Color3.new(0, 1, 0)  -- Green lines
        line.Thickness = 2
        line.Transparency = 1
        table.insert(skeletonESP[player], {PartA = conn[1], PartB = conn[2], Line = line})
    end
end

-- Remove the ESP drawings for a player.
local function removeSkeletonDrawing(player)
    if skeletonESP[player] then
        for _, conn in ipairs(skeletonESP[player]) do
            if conn.Line then
                conn.Line:Remove()
            end
        end
        skeletonESP[player] = nil
    end
end

-- Update all enemy ESP lines each frame.
local function updateSkeletonESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            -- Create ESP if not already created.
            if not skeletonESP[player] then
                createSkeletonDrawing(player)
            end
            local character = player.Character
            local connections = skeletonESP[player]
            for _, data in ipairs(connections) do
                local partA = character:FindFirstChild(data.PartA)
                local partB = character:FindFirstChild(data.PartB)
                if partA and partB then
                    local posA, onScreenA = Camera:WorldToViewportPoint(partA.Position)
                    local posB, onScreenB = Camera:WorldToViewportPoint(partB.Position)
                    if onScreenA and onScreenB then
                        data.Line.From = Vector2.new(posA.X, posA.Y)
                        data.Line.To = Vector2.new(posB.X, posB.Y)
                        data.Line.Visible = true
                    else
                        data.Line.Visible = false
                    end
                else
                    data.Line.Visible = false
                end
            end
        end
    end
end
local function enableSkeletonESP()
    skeletonESPEnabled = true
    espConnection = RunService.RenderStepped:Connect(updateSkeletonESP)
end

-- Disable the skeleton ESP and remove all drawings
local function disableSkeletonESP()
    skeletonESPEnabled = false
    if espConnection then
        espConnection:Disconnect()
        espConnection = nil
    end
    for player, _ in pairs(skeletonESP) do
        removeSkeletonDrawing(player)
    end
end

-- Clean up when players leave
Players.PlayerRemoving:Connect(function(player)
    removeSkeletonDrawing(player)
end)

-- Also update ESP for character respawns.
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if skeletonESPEnabled then
            createSkeletonDrawing(player)
        end
    end)
end)

-- UI Toggle Integration (Assuming MainSection is your UI container)
MainSection:AddToggle({
    Label = "Skeleton ESP",
    Default = false,
    Size = UDim2.new(0, 300, 0, 40)
}, function(state)
    if state then
        enableSkeletonESP()
    else
        disableSkeletonESP()
    end
end)

